# #commercetools Composable Commerce
#
# No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
#
# OpenAPI spec version: v1
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.34

module CommercetoolsSdk
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [ApiClient]
    def by_project_key_api_clients_by_id_delete(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_api_clients_by_id_delete_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiClient, Integer, Hash)>] ApiClient data, response status code and response headers
    def by_project_key_api_clients_by_id_delete_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_api_clients_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_api_clients_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_api_clients_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/api-clients/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ApiClient'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_api_clients_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [ApiClient]
    def by_project_key_api_clients_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_api_clients_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiClient, Integer, Hash)>] ApiClient data, response status code and response headers
    def by_project_key_api_clients_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_api_clients_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_api_clients_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_api_clients_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/api-clients/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ApiClient'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_api_clients_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ApiClientPagedQueryResponse]
    def by_project_key_api_clients_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_api_clients_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ApiClientPagedQueryResponse, Integer, Hash)>] ApiClientPagedQueryResponse data, response status code and response headers
    def by_project_key_api_clients_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_api_clients_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_api_clients_get"
      end

      # resource path
      local_var_path = '/{projectKey}/api-clients'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ApiClientPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_api_clients_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ApiClientDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ApiClient]
    def by_project_key_api_clients_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_api_clients_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ApiClientDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ApiClient, Integer, Hash)>] ApiClient data, response status code and response headers
    def by_project_key_api_clients_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_api_clients_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_api_clients_post"
      end

      # resource path
      local_var_path = '/{projectKey}/api-clients'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ApiClient'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_api_clients_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CartDiscount]
    def by_project_key_cart_discounts_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_cart_discounts_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CartDiscount, Integer, Hash)>] CartDiscount data, response status code and response headers
    def by_project_key_cart_discounts_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_cart_discounts_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_cart_discounts_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_cart_discounts_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_cart_discounts_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/cart-discounts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_cart_discounts_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CartDiscount]
    def by_project_key_cart_discounts_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_cart_discounts_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CartDiscount, Integer, Hash)>] CartDiscount data, response status code and response headers
    def by_project_key_cart_discounts_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_cart_discounts_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_cart_discounts_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_cart_discounts_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/cart-discounts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_cart_discounts_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CartDiscountUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CartDiscount]
    def by_project_key_cart_discounts_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_cart_discounts_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CartDiscountUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CartDiscount, Integer, Hash)>] CartDiscount data, response status code and response headers
    def by_project_key_cart_discounts_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_cart_discounts_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_cart_discounts_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_cart_discounts_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/cart-discounts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CartDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_cart_discounts_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CartDiscountPagedQueryResponse]
    def by_project_key_cart_discounts_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_cart_discounts_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CartDiscountPagedQueryResponse, Integer, Hash)>] CartDiscountPagedQueryResponse data, response status code and response headers
    def by_project_key_cart_discounts_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_cart_discounts_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_cart_discounts_get"
      end

      # resource path
      local_var_path = '/{projectKey}/cart-discounts'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartDiscountPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_cart_discounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CartDiscount]
    def by_project_key_cart_discounts_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_cart_discounts_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CartDiscount, Integer, Hash)>] CartDiscount data, response status code and response headers
    def by_project_key_cart_discounts_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_cart_discounts_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_cart_discounts_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_cart_discounts_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_cart_discounts_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/cart-discounts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_cart_discounts_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CartDiscount]
    def by_project_key_cart_discounts_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_cart_discounts_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CartDiscount, Integer, Hash)>] CartDiscount data, response status code and response headers
    def by_project_key_cart_discounts_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_cart_discounts_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_cart_discounts_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_cart_discounts_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/cart-discounts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_cart_discounts_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CartDiscountUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CartDiscount]
    def by_project_key_cart_discounts_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_cart_discounts_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CartDiscountUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CartDiscount, Integer, Hash)>] CartDiscount data, response status code and response headers
    def by_project_key_cart_discounts_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_cart_discounts_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_cart_discounts_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_cart_discounts_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/cart-discounts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CartDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_cart_discounts_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CartDiscountDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CartDiscount]
    def by_project_key_cart_discounts_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_cart_discounts_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CartDiscountDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CartDiscount, Integer, Hash)>] CartDiscount data, response status code and response headers
    def by_project_key_cart_discounts_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_cart_discounts_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_cart_discounts_post"
      end

      # resource path
      local_var_path = '/{projectKey}/cart-discounts'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CartDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_cart_discounts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_carts_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_carts_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_carts_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_carts_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_carts_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_carts_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_carts_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_carts_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_carts_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_carts_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the active cart of the customer that has been modified most recently. It does not consider carts with CartOrigin Merchant. If no active cart exists, a 404 Not Found error is returned.  The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param customer_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_carts_customer_id_by_customer_id_get(project_key, customer_id, opts = {})
      data, _status_code, _headers = by_project_key_carts_customer_id_by_customer_id_get_with_http_info(project_key, customer_id, opts)
      data
    end

    # Retrieves the active cart of the customer that has been modified most recently. It does not consider carts with CartOrigin Merchant. If no active cart exists, a 404 Not Found error is returned.  The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param customer_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_customer_id_by_customer_id_get_with_http_info(project_key, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_customer_id_by_customer_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_customer_id_by_customer_id_get"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.by_project_key_carts_customer_id_by_customer_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/carts/customer-id={customerId}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_customer_id_by_customer_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CartPagedQueryResponse]
    def by_project_key_carts_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_carts_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CartPagedQueryResponse, Integer, Hash)>] CartPagedQueryResponse data, response status code and response headers
    def by_project_key_carts_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_get"
      end

      # resource path
      local_var_path = '/{projectKey}/carts'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_carts_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_carts_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_carts_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_carts_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_carts_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_carts_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_carts_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_carts_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_carts_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_carts_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creating a cart can fail with an InvalidOperation if the referenced shipping method in the CartDraft has a predicate which does not match the cart.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_carts_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_carts_post_with_http_info(project_key, opts)
      data
    end

    # Creating a cart can fail with an InvalidOperation if the referenced shipping method in the CartDraft has a predicate which does not match the cart.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_post"
      end

      # resource path
      local_var_path = '/{projectKey}/carts'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ReplicaCartDraft] :body
    # @return [Cart]
    def by_project_key_carts_replicate_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_carts_replicate_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ReplicaCartDraft] :body
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_carts_replicate_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_carts_replicate_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_carts_replicate_post"
      end

      # resource path
      local_var_path = '/{projectKey}/carts/replicate'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_carts_replicate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Category]
    def by_project_key_categories_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_categories_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def by_project_key_categories_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_categories_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_categories_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_categories_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_categories_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/categories/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Category'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_categories_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Category]
    def by_project_key_categories_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_categories_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # Either the [scope](/../api/scopes) &#x60;view_products:{projectKey}&#x60; or &#x60;view_categories:{projectKey}&#x60; is required.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def by_project_key_categories_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_categories_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_categories_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_categories_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/categories/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Category'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_categories_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Category]
    def by_project_key_categories_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_categories_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def by_project_key_categories_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_categories_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_categories_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_categories_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/categories/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Category'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_categories_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CategoryPagedQueryResponse]
    def by_project_key_categories_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_categories_get_with_http_info(project_key, opts)
      data
    end

    # Either the [scope](/../api/scopes) &#x60;view_products:{projectKey}&#x60; or &#x60;view_categories:{projectKey}&#x60; is required.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CategoryPagedQueryResponse, Integer, Hash)>] CategoryPagedQueryResponse data, response status code and response headers
    def by_project_key_categories_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_categories_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_categories_get"
      end

      # resource path
      local_var_path = '/{projectKey}/categories'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CategoryPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Category]
    def by_project_key_categories_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_categories_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.
    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def by_project_key_categories_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_categories_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_categories_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_categories_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_categories_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/categories/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Category'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_categories_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Category]
    def by_project_key_categories_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_categories_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # Either the [scope](/../api/scopes) &#x60;view_products:{projectKey}&#x60; or &#x60;view_categories:{projectKey}&#x60; is required.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def by_project_key_categories_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_categories_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_categories_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_categories_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/categories/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Category'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_categories_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Category]
    def by_project_key_categories_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_categories_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def by_project_key_categories_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_categories_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_categories_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_categories_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/categories/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Category'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_categories_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.  Creating a Category produces the [CategoryCreatedMessage](/../api/message-types#categorycreatedmessage).
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Category]
    def by_project_key_categories_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_categories_post_with_http_info(project_key, opts)
      data
    end

    # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.  Creating a Category produces the [CategoryCreatedMessage](/../api/message-types#categorycreatedmessage).
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def by_project_key_categories_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_categories_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_categories_post"
      end

      # resource path
      local_var_path = '/{projectKey}/categories'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Category'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_categories_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Channel]
    def by_project_key_channels_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_channels_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Channel, Integer, Hash)>] Channel data, response status code and response headers
    def by_project_key_channels_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_channels_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_channels_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_channels_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_channels_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/channels/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Channel'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_channels_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Channel]
    def by_project_key_channels_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_channels_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Channel, Integer, Hash)>] Channel data, response status code and response headers
    def by_project_key_channels_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_channels_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_channels_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_channels_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/channels/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Channel'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_channels_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ChannelUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Channel]
    def by_project_key_channels_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_channels_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ChannelUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Channel, Integer, Hash)>] Channel data, response status code and response headers
    def by_project_key_channels_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_channels_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_channels_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_channels_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/channels/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Channel'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_channels_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ChannelPagedQueryResponse]
    def by_project_key_channels_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_channels_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ChannelPagedQueryResponse, Integer, Hash)>] ChannelPagedQueryResponse data, response status code and response headers
    def by_project_key_channels_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_channels_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_channels_get"
      end

      # resource path
      local_var_path = '/{projectKey}/channels'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ChannelPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_channels_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ChannelDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Channel]
    def by_project_key_channels_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_channels_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ChannelDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Channel, Integer, Hash)>] Channel data, response status code and response headers
    def by_project_key_channels_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_channels_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_channels_post"
      end

      # resource path
      local_var_path = '/{projectKey}/channels'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Channel'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_channels_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param container
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :version
    # @option opts [Array<Expansion>] :expand
    # @option opts [BOOLEAN] :data_erasure
    # @return [CustomObject]
    def by_project_key_custom_objects_by_container_by_key_delete(project_key, container, key, opts = {})
      data, _status_code, _headers = by_project_key_custom_objects_by_container_by_key_delete_with_http_info(project_key, container, key, opts)
      data
    end

    # @param project_key
    # @param container
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :version
    # @option opts [Array<Expansion>] :expand
    # @option opts [BOOLEAN] :data_erasure
    # @return [Array<(CustomObject, Integer, Hash)>] CustomObject data, response status code and response headers
    def by_project_key_custom_objects_by_container_by_key_delete_with_http_info(project_key, container, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_custom_objects_by_container_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_custom_objects_by_container_by_key_delete"
      end
      # verify the required parameter 'container' is set
      if @api_client.config.client_side_validation && container.nil?
        fail ArgumentError, "Missing the required parameter 'container' when calling DefaultApi.by_project_key_custom_objects_by_container_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_custom_objects_by_container_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/custom-objects/{container}/{key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'container' + '}', container.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = opts[:version] if !opts[:version].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomObject'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_custom_objects_by_container_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param container
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CustomObject]
    def by_project_key_custom_objects_by_container_by_key_get(project_key, container, key, opts = {})
      data, _status_code, _headers = by_project_key_custom_objects_by_container_by_key_get_with_http_info(project_key, container, key, opts)
      data
    end

    # @param project_key
    # @param container
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomObject, Integer, Hash)>] CustomObject data, response status code and response headers
    def by_project_key_custom_objects_by_container_by_key_get_with_http_info(project_key, container, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_custom_objects_by_container_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_custom_objects_by_container_by_key_get"
      end
      # verify the required parameter 'container' is set
      if @api_client.config.client_side_validation && container.nil?
        fail ArgumentError, "Missing the required parameter 'container' when calling DefaultApi.by_project_key_custom_objects_by_container_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_custom_objects_by_container_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/custom-objects/{container}/{key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'container' + '}', container.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomObject'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_custom_objects_by_container_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param container
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Sort>] :sort
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @return [CustomObjectPagedQueryResponse]
    def by_project_key_custom_objects_by_container_get(project_key, container, opts = {})
      data, _status_code, _headers = by_project_key_custom_objects_by_container_get_with_http_info(project_key, container, opts)
      data
    end

    # @param project_key
    # @param container
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Sort>] :sort
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @return [Array<(CustomObjectPagedQueryResponse, Integer, Hash)>] CustomObjectPagedQueryResponse data, response status code and response headers
    def by_project_key_custom_objects_by_container_get_with_http_info(project_key, container, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_custom_objects_by_container_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_custom_objects_by_container_get"
      end
      # verify the required parameter 'container' is set
      if @api_client.config.client_side_validation && container.nil?
        fail ArgumentError, "Missing the required parameter 'container' when calling DefaultApi.by_project_key_custom_objects_by_container_get"
      end

      # resource path
      local_var_path = '/{projectKey}/custom-objects/{container}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'container' + '}', container.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomObjectPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_custom_objects_by_container_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # For performance reasons, it is highly advisable to query for Custom Objects in a container by using the `container` field in the `where` predicate.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CustomObjectPagedQueryResponse]
    def by_project_key_custom_objects_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_custom_objects_get_with_http_info(project_key, opts)
      data
    end

    # For performance reasons, it is highly advisable to query for Custom Objects in a container by using the &#x60;container&#x60; field in the &#x60;where&#x60; predicate.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CustomObjectPagedQueryResponse, Integer, Hash)>] CustomObjectPagedQueryResponse data, response status code and response headers
    def by_project_key_custom_objects_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_custom_objects_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_custom_objects_get"
      end

      # resource path
      local_var_path = '/{projectKey}/custom-objects'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomObjectPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_custom_objects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # If an object with the given container/key exists, the object will be replaced with the new value and the version is incremented. If the request contains a version and an object with the given container/key, then the version must match the version of the existing object. Concurrent updates for the same Custom Object can result in a [409 Conflict](/../api/errors#409-conflict) even if the version is not provided.  Fields with `null` values will **not be saved**.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomObjectDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CustomObject]
    def by_project_key_custom_objects_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_custom_objects_post_with_http_info(project_key, opts)
      data
    end

    # If an object with the given container/key exists, the object will be replaced with the new value and the version is incremented. If the request contains a version and an object with the given container/key, then the version must match the version of the existing object. Concurrent updates for the same Custom Object can result in a [409 Conflict](/../api/errors#409-conflict) even if the version is not provided.  Fields with &#x60;null&#x60; values will **not be saved**.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomObjectDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomObject, Integer, Hash)>] CustomObject data, response status code and response headers
    def by_project_key_custom_objects_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_custom_objects_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_custom_objects_post"
      end

      # resource path
      local_var_path = '/{projectKey}/custom-objects'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomObject'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_custom_objects_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerGroup]
    def by_project_key_customer_groups_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_customer_groups_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerGroup, Integer, Hash)>] CustomerGroup data, response status code and response headers
    def by_project_key_customer_groups_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customer_groups_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customer_groups_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_customer_groups_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_customer_groups_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/customer-groups/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomerGroup'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customer_groups_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerGroup]
    def by_project_key_customer_groups_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_customer_groups_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerGroup, Integer, Hash)>] CustomerGroup data, response status code and response headers
    def by_project_key_customer_groups_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customer_groups_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customer_groups_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_customer_groups_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/customer-groups/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomerGroup'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customer_groups_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerGroupUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerGroup]
    def by_project_key_customer_groups_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_customer_groups_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerGroupUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerGroup, Integer, Hash)>] CustomerGroup data, response status code and response headers
    def by_project_key_customer_groups_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customer_groups_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customer_groups_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_customer_groups_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customer-groups/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerGroup'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customer_groups_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CustomerGroupPagedQueryResponse]
    def by_project_key_customer_groups_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customer_groups_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CustomerGroupPagedQueryResponse, Integer, Hash)>] CustomerGroupPagedQueryResponse data, response status code and response headers
    def by_project_key_customer_groups_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customer_groups_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customer_groups_get"
      end

      # resource path
      local_var_path = '/{projectKey}/customer-groups'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomerGroupPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customer_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerGroup]
    def by_project_key_customer_groups_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_customer_groups_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerGroup, Integer, Hash)>] CustomerGroup data, response status code and response headers
    def by_project_key_customer_groups_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customer_groups_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customer_groups_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_customer_groups_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_customer_groups_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/customer-groups/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomerGroup'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customer_groups_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerGroup]
    def by_project_key_customer_groups_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_customer_groups_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerGroup, Integer, Hash)>] CustomerGroup data, response status code and response headers
    def by_project_key_customer_groups_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customer_groups_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customer_groups_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_customer_groups_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/customer-groups/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomerGroup'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customer_groups_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerGroupUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerGroup]
    def by_project_key_customer_groups_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_customer_groups_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerGroupUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerGroup, Integer, Hash)>] CustomerGroup data, response status code and response headers
    def by_project_key_customer_groups_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customer_groups_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customer_groups_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_customer_groups_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customer-groups/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerGroup'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customer_groups_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerGroupDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerGroup]
    def by_project_key_customer_groups_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customer_groups_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerGroupDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerGroup, Integer, Hash)>] CustomerGroup data, response status code and response headers
    def by_project_key_customer_groups_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customer_groups_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customer_groups_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customer-groups'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerGroup'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customer_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_customers_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_customers_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_customers_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_customers_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_customers_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_customers_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_customers_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_customers_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_customers_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_customers_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verifies customer's email using a token.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerEmailVerify] :body
    # @return [Customer]
    def by_project_key_customers_email_confirm_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customers_email_confirm_post_with_http_info(project_key, opts)
      data
    end

    # Verifies customer&#x27;s email using a token.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerEmailVerify] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_email_confirm_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_email_confirm_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_email_confirm_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/email/confirm'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_email_confirm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param email_token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_customers_email_token_by_email_token_get(project_key, email_token, opts = {})
      data, _status_code, _headers = by_project_key_customers_email_token_by_email_token_get_with_http_info(project_key, email_token, opts)
      data
    end

    # @param project_key
    # @param email_token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_email_token_by_email_token_get_with_http_info(project_key, email_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_email_token_by_email_token_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_email_token_by_email_token_get"
      end
      # verify the required parameter 'email_token' is set
      if @api_client.config.client_side_validation && email_token.nil?
        fail ArgumentError, "Missing the required parameter 'email_token' when calling DefaultApi.by_project_key_customers_email_token_by_email_token_get"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/email-token={emailToken}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'emailToken' + '}', email_token.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_email_token_by_email_token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Token for verifying the Customer's Email
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerCreateEmailToken] :body
    # @return [CustomerToken]
    def by_project_key_customers_email_token_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customers_email_token_post_with_http_info(project_key, opts)
      data
    end

    # Create a Token for verifying the Customer&#x27;s Email
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerCreateEmailToken] :body
    # @return [Array<(CustomerToken, Integer, Hash)>] CustomerToken data, response status code and response headers
    def by_project_key_customers_email_token_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_email_token_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_email_token_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/email-token'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerToken'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_email_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CustomerPagedQueryResponse]
    def by_project_key_customers_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customers_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CustomerPagedQueryResponse, Integer, Hash)>] CustomerPagedQueryResponse data, response status code and response headers
    def by_project_key_customers_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_get"
      end

      # resource path
      local_var_path = '/{projectKey}/customers'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomerPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_customers_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_customers_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_customers_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_customers_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_customers_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_customers_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_customers_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_customers_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_customers_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_customers_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change a customers password
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerChangePassword] :body
    # @return [Customer]
    def by_project_key_customers_password_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customers_password_post_with_http_info(project_key, opts)
      data
    end

    # Change a customers password
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerChangePassword] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_password_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_password_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_password_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/password'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_password_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set a new password using a token.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerResetPassword] :body
    # @return [Customer]
    def by_project_key_customers_password_reset_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customers_password_reset_post_with_http_info(project_key, opts)
      data
    end

    # Set a new password using a token.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerResetPassword] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_password_reset_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_password_reset_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_password_reset_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/password/reset'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_password_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param password_token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_customers_password_token_by_password_token_get(project_key, password_token, opts = {})
      data, _status_code, _headers = by_project_key_customers_password_token_by_password_token_get_with_http_info(project_key, password_token, opts)
      data
    end

    # @param project_key
    # @param password_token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_customers_password_token_by_password_token_get_with_http_info(project_key, password_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_password_token_by_password_token_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_password_token_by_password_token_get"
      end
      # verify the required parameter 'password_token' is set
      if @api_client.config.client_side_validation && password_token.nil?
        fail ArgumentError, "Missing the required parameter 'password_token' when calling DefaultApi.by_project_key_customers_password_token_by_password_token_get"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/password-token={passwordToken}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'passwordToken' + '}', password_token.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_password_token_by_password_token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The token value is used to reset the password of the customer with the given email. The token is valid only for 10 minutes.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerCreatePasswordResetToken] :body
    # @return [CustomerToken]
    def by_project_key_customers_password_token_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customers_password_token_post_with_http_info(project_key, opts)
      data
    end

    # The token value is used to reset the password of the customer with the given email. The token is valid only for 10 minutes.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerCreatePasswordResetToken] :body
    # @return [Array<(CustomerToken, Integer, Hash)>] CustomerToken data, response status code and response headers
    def by_project_key_customers_password_token_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_password_token_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_password_token_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customers/password-token'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerToken'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_password_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a customer. If an anonymous cart is passed in, then the cart is assigned to the created customer and the version number of the Cart will increase. If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerSignInResult]
    def by_project_key_customers_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_customers_post_with_http_info(project_key, opts)
      data
    end

    # Creates a customer. If an anonymous cart is passed in, then the cart is assigned to the created customer and the version number of the Cart will increase. If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerSignInResult, Integer, Hash)>] CustomerSignInResult data, response status code and response headers
    def by_project_key_customers_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_customers_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_customers_post"
      end

      # resource path
      local_var_path = '/{projectKey}/customers'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerSignInResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_customers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated scope: `manage_orders:{projectKey}`
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [DiscountCode]
    def by_project_key_discount_codes_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_discount_codes_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # Deprecated scope: &#x60;manage_orders:{projectKey}&#x60;
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(DiscountCode, Integer, Hash)>] DiscountCode data, response status code and response headers
    def by_project_key_discount_codes_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_discount_codes_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_discount_codes_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_discount_codes_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_discount_codes_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/discount-codes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'DiscountCode'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_discount_codes_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated scope: `view_orders:{projectKey}`
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [DiscountCode]
    def by_project_key_discount_codes_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_discount_codes_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # Deprecated scope: &#x60;view_orders:{projectKey}&#x60;
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(DiscountCode, Integer, Hash)>] DiscountCode data, response status code and response headers
    def by_project_key_discount_codes_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_discount_codes_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_discount_codes_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_discount_codes_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/discount-codes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'DiscountCode'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_discount_codes_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated scope: `manage_orders:{projectKey}`
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [DiscountCodeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [DiscountCode]
    def by_project_key_discount_codes_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_discount_codes_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # Deprecated scope: &#x60;manage_orders:{projectKey}&#x60;
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [DiscountCodeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(DiscountCode, Integer, Hash)>] DiscountCode data, response status code and response headers
    def by_project_key_discount_codes_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_discount_codes_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_discount_codes_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_discount_codes_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/discount-codes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'DiscountCode'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_discount_codes_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated scope: `view_orders:{projectKey}`
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [DiscountCodePagedQueryResponse]
    def by_project_key_discount_codes_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_discount_codes_get_with_http_info(project_key, opts)
      data
    end

    # Deprecated scope: &#x60;view_orders:{projectKey}&#x60;
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(DiscountCodePagedQueryResponse, Integer, Hash)>] DiscountCodePagedQueryResponse data, response status code and response headers
    def by_project_key_discount_codes_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_discount_codes_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_discount_codes_get"
      end

      # resource path
      local_var_path = '/{projectKey}/discount-codes'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'DiscountCodePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_discount_codes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated scope: `manage_orders:{projectKey}`
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [DiscountCodeDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [DiscountCode]
    def by_project_key_discount_codes_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_discount_codes_post_with_http_info(project_key, opts)
      data
    end

    # Deprecated scope: &#x60;manage_orders:{projectKey}&#x60;
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [DiscountCodeDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(DiscountCode, Integer, Hash)>] DiscountCode data, response status code and response headers
    def by_project_key_discount_codes_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_discount_codes_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_discount_codes_post"
      end

      # resource path
      local_var_path = '/{projectKey}/discount-codes'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'DiscountCode'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_discount_codes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Extension]
    def by_project_key_extensions_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_extensions_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Extension, Integer, Hash)>] Extension data, response status code and response headers
    def by_project_key_extensions_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_extensions_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_extensions_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_extensions_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_extensions_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/extensions/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Extension'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_extensions_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Extension]
    def by_project_key_extensions_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_extensions_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Extension, Integer, Hash)>] Extension data, response status code and response headers
    def by_project_key_extensions_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_extensions_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_extensions_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_extensions_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/extensions/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Extension'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_extensions_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ExtensionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Extension]
    def by_project_key_extensions_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_extensions_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ExtensionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Extension, Integer, Hash)>] Extension data, response status code and response headers
    def by_project_key_extensions_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_extensions_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_extensions_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_extensions_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/extensions/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Extension'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_extensions_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ExtensionPagedQueryResponse]
    def by_project_key_extensions_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_extensions_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ExtensionPagedQueryResponse, Integer, Hash)>] ExtensionPagedQueryResponse data, response status code and response headers
    def by_project_key_extensions_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_extensions_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_extensions_get"
      end

      # resource path
      local_var_path = '/{projectKey}/extensions'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ExtensionPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_extensions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Extension]
    def by_project_key_extensions_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_extensions_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Extension, Integer, Hash)>] Extension data, response status code and response headers
    def by_project_key_extensions_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_extensions_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_extensions_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_extensions_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_extensions_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/extensions/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Extension'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_extensions_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Extension]
    def by_project_key_extensions_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_extensions_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Extension, Integer, Hash)>] Extension data, response status code and response headers
    def by_project_key_extensions_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_extensions_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_extensions_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_extensions_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/extensions/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Extension'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_extensions_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ExtensionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Extension]
    def by_project_key_extensions_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_extensions_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ExtensionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Extension, Integer, Hash)>] Extension data, response status code and response headers
    def by_project_key_extensions_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_extensions_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_extensions_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_extensions_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/extensions/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Extension'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_extensions_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ExtensionDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Extension]
    def by_project_key_extensions_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_extensions_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ExtensionDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Extension, Integer, Hash)>] Extension data, response status code and response headers
    def by_project_key_extensions_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_extensions_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_extensions_post"
      end

      # resource path
      local_var_path = '/{projectKey}/extensions'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Extension'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_extensions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def by_project_key_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def by_project_key_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Project'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute a GraphQL query
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [GraphQLRequest] :body
    # @return [GraphQLResponse]
    def by_project_key_graphql_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_graphql_post_with_http_info(project_key, opts)
      data
    end

    # Execute a GraphQL query
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [GraphQLRequest] :body
    # @return [Array<(GraphQLResponse, Integer, Hash)>] GraphQLResponse data, response status code and response headers
    def by_project_key_graphql_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_graphql_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_graphql_post"
      end

      # resource path
      local_var_path = '/{projectKey}/graphql'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/graphql'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'GraphQLResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_graphql_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_by_id_delete(project_key, store_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_by_id_delete_with_http_info(project_key, store_key, id, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_by_id_delete_with_http_info(project_key, store_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a cart by its ID from a specific Store. If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_by_id_get(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_by_id_get_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Returns a cart by its ID from a specific Store. If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_by_id_get_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`. If the Cart exists in the Project but does not have the store field, or the `store` field references a different Store, this method returns a [ResourceNotFoundError](ctp:api:type:ResourceNotFoundError).
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_by_id_post(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_by_id_post_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Updates a [Cart](ctp:api:type:Cart) in the Store specified by &#x60;storeKey&#x60;. If the Cart exists in the Project but does not have the store field, or the &#x60;store&#x60; field references a different Store, this method returns a [ResourceNotFoundError](ctp:api:type:ResourceNotFoundError).
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_by_id_post_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the active cart of the customer that has been modified most recently in a specific Store.  If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.  The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param store_key
    # @param customer_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get(project_key, store_key, customer_id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get_with_http_info(project_key, store_key, customer_id, opts)
      data
    end

    # Retrieves the active cart of the customer that has been modified most recently in a specific Store.  If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.  The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param store_key
    # @param customer_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get_with_http_info(project_key, store_key, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries carts in a specific Store.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CartPagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_carts_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_get_with_http_info(project_key, store_key, opts)
      data
    end

    # Queries carts in a specific Store.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CartPagedQueryResponse, Integer, Hash)>] CartPagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_key_by_key_delete(project_key, store_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_key_by_key_delete_with_http_info(project_key, store_key, key, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_key_by_key_delete_with_http_info(project_key, store_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a cart by its key from a specific Store. If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_key_by_key_get(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_key_by_key_get_with_http_info(project_key, store_key, key, opts)
      data
    end

    # Returns a cart by its key from a specific Store. If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_key_by_key_get_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`. If the Cart exists in the Project but does not have the store field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFound) error.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_key_by_key_post(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_key_by_key_post_with_http_info(project_key, store_key, key, opts)
      data
    end

    # Updates a [Cart](ctp:api:type:Cart) in the Store specified by &#x60;storeKey&#x60;. If the Cart exists in the Project but does not have the store field, or the &#x60;store&#x60; field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFound) error.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_key_by_key_post_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`. When using this endpoint the Cart's `store` field is always set to the store specified in the path parameter. Creating a Cart can fail with an [InvalidOperationError](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate which does not match the Cart.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Creates a [Cart](ctp:api:type:Cart) in the Store specified by &#x60;storeKey&#x60;. When using this endpoint the Cart&#x27;s &#x60;store&#x60; field is always set to the store specified in the path parameter. Creating a Cart can fail with an [InvalidOperationError](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate which does not match the Cart.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [ReplicaCartDraft] :body
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_carts_replicate_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_carts_replicate_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [ReplicaCartDraft] :body
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_carts_replicate_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_carts_replicate_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_replicate_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_carts_replicate_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/carts/replicate'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_carts_replicate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_by_id_delete(project_key, store_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_by_id_delete_with_http_info(project_key, store_key, id, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_by_id_delete_with_http_info(project_key, store_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a customer by its ID from a specific Store. It also considers customers that do not have the stores field. If the customer exists in the project but the stores field references different stores, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_by_id_get(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_by_id_get_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Returns a customer by its ID from a specific Store. It also considers customers that do not have the stores field. If the customer exists in the project but the stores field references different stores, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_by_id_get_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a customer in the store specified by {storeKey}. If the customer exists in the project but the stores field references a different store, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_by_id_post(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_by_id_post_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Updates a customer in the store specified by {storeKey}. If the customer exists in the project but the stores field references a different store, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_by_id_post_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verifies customer's email using a token.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerEmailVerify] :body
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_email_confirm_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_email_confirm_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Verifies customer&#x27;s email using a token.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerEmailVerify] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_email_confirm_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_confirm_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_confirm_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_confirm_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/email/confirm'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_email_confirm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param email_token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get(project_key, store_key, email_token, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get_with_http_info(project_key, store_key, email_token, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param email_token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get_with_http_info(project_key, store_key, email_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get"
      end
      # verify the required parameter 'email_token' is set
      if @api_client.config.client_side_validation && email_token.nil?
        fail ArgumentError, "Missing the required parameter 'email_token' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'emailToken' + '}', email_token.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Token for verifying the Customer's Email in store
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerCreateEmailToken] :body
    # @return [CustomerToken]
    def by_project_key_in_store_key_by_store_key_customers_email_token_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_email_token_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Create a Token for verifying the Customer&#x27;s Email in store
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerCreateEmailToken] :body
    # @return [Array<(CustomerToken, Integer, Hash)>] CustomerToken data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_email_token_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_token_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_token_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_email_token_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/email-token'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerToken'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_email_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CustomerPagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_customers_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_get_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CustomerPagedQueryResponse, Integer, Hash)>] CustomerPagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CustomerPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_key_by_key_delete(project_key, store_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_key_by_key_delete_with_http_info(project_key, store_key, key, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_key_by_key_delete_with_http_info(project_key, store_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a customer by its Key from a specific Store. It also considers customers that do not have the stores field. If the customer exists in the project but the stores field references different stores, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_key_by_key_get(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_key_by_key_get_with_http_info(project_key, store_key, key, opts)
      data
    end

    # Returns a customer by its Key from a specific Store. It also considers customers that do not have the stores field. If the customer exists in the project but the stores field references different stores, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_key_by_key_get_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # If the customer exists in the project but the stores field references a different store, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_key_by_key_post(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_key_by_key_post_with_http_info(project_key, store_key, key, opts)
      data
    end

    # If the customer exists in the project but the stores field references a different store, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_key_by_key_post_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change a customers password
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerChangePassword] :body
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_password_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_password_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Change a customers password
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerChangePassword] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_password_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/password'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_password_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set a new password using a token.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerResetPassword] :body
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_password_reset_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_password_reset_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Set a new password using a token.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerResetPassword] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_password_reset_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_reset_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_reset_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_reset_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/password/reset'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_password_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param password_token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get(project_key, store_key, password_token, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get_with_http_info(project_key, store_key, password_token, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param password_token
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get_with_http_info(project_key, store_key, password_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get"
      end
      # verify the required parameter 'password_token' is set
      if @api_client.config.client_side_validation && password_token.nil?
        fail ArgumentError, "Missing the required parameter 'password_token' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'passwordToken' + '}', password_token.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The token value is used to reset the password of the customer with the given email. The token is valid only for 10 minutes.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerCreatePasswordResetToken] :body
    # @return [CustomerToken]
    def by_project_key_in_store_key_by_store_key_customers_password_token_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_password_token_post_with_http_info(project_key, store_key, opts)
      data
    end

    # The token value is used to reset the password of the customer with the given email. The token is valid only for 10 minutes.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerCreatePasswordResetToken] :body
    # @return [Array<(CustomerToken, Integer, Hash)>] CustomerToken data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_password_token_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_token_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_token_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_password_token_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers/password-token'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerToken'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_password_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a customer in a specific Store. When using this endpoint, if omitted, the customer's stores field is set to the store specified in the path parameter. If an anonymous cart is passed in as when using this method, then the cart is assigned to the created customer and the version number of the Cart increases. If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer and the store specified. If you pass in a cart with a store field specified, the store field must reference the same store specified in the {storeKey} path parameter.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [CustomerSignInResult]
    def by_project_key_in_store_key_by_store_key_customers_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_customers_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Creates a customer in a specific Store. When using this endpoint, if omitted, the customer&#x27;s stores field is set to the store specified in the path parameter. If an anonymous cart is passed in as when using this method, then the cart is assigned to the created customer and the version number of the Cart increases. If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer and the store specified. If you pass in a cart with a store field specified, the store field must reference the same store specified in the {storeKey} path parameter.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(CustomerSignInResult, Integer, Hash)>] CustomerSignInResult data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_customers_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_customers_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_customers_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/customers'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerSignInResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_customers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Authenticate Customer (Sign In) in store
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerSignin] :body
    # @return [CustomerSignInResult]
    def by_project_key_in_store_key_by_store_key_login_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_login_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Authenticate Customer (Sign In) in store
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerSignin] :body
    # @return [Array<(CustomerSignInResult, Integer, Hash)>] CustomerSignInResult data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_login_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_login_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_login_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_login_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/login'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerSignInResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_me_active_cart_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_active_cart_get_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_active_cart_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_active_cart_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_active_cart_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_active_cart_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/active-cart'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_active_cart_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_me_carts_by_id_delete(project_key, store_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_carts_by_id_delete_with_http_info(project_key, store_key, id, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_carts_by_id_delete_with_http_info(project_key, store_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_carts_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_me_carts_by_id_get(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_carts_by_id_get_with_http_info(project_key, store_key, id, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_carts_by_id_get_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_carts_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_me_carts_by_id_post(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_carts_by_id_post_with_http_info(project_key, store_key, id, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_carts_by_id_post_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_carts_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CartPagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_me_carts_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_carts_get_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CartPagedQueryResponse, Integer, Hash)>] CartPagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_carts_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/carts'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_carts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_in_store_key_by_store_key_me_carts_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_carts_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_carts_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_carts_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/carts'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_carts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete my Customer in a store
    # @param project_key
    # @param store_key
    # @param version
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_me_delete(project_key, store_key, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_delete_with_http_info(project_key, store_key, version, opts)
      data
    end

    # Delete my Customer in a store
    # @param project_key
    # @param store_key
    # @param version
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_delete_with_http_info(project_key, store_key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerEmailVerify] :body
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_me_email_confirm_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_email_confirm_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerEmailVerify] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_email_confirm_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_email_confirm_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_email_confirm_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_email_confirm_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/email/confirm'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_email_confirm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_me_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_get_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerSignin] :body
    # @return [CustomerSignInResult]
    def by_project_key_in_store_key_by_store_key_me_login_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_login_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerSignin] :body
    # @return [Array<(CustomerSignInResult, Integer, Hash)>] CustomerSignInResult data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_login_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_login_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_login_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_login_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/login'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerSignInResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_me_orders_by_id_get(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_orders_by_id_get_with_http_info(project_key, store_key, id, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_orders_by_id_get_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_by_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/orders/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_orders_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [OrderPagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_me_orders_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_orders_get_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(OrderPagedQueryResponse, Integer, Hash)>] OrderPagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_orders_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/orders'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_orders_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyOrderFromCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_me_orders_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_orders_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyOrderFromCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_orders_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_orders_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/orders'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_orders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerChangePassword] :body
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_me_password_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_password_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerChangePassword] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_password_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_password_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_password_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_password_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/password'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_password_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerResetPassword] :body
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_me_password_reset_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_password_reset_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerResetPassword] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_password_reset_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_password_reset_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_password_reset_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_password_reset_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/password/reset'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_password_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update my customer in a store
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerUpdate] :body
    # @return [Customer]
    def by_project_key_in_store_key_by_store_key_me_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Update my customer in a store
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerUpdate] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete(project_key, store_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete_with_http_info(project_key, store_key, id, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete_with_http_info(project_key, store_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a shopping list by ID.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Gets a shopping list by ID.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post_with_http_info(project_key, store_key, id, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ShoppingListPagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_shopping_lists_get_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ShoppingListPagedQueryResponse, Integer, Hash)>] ShoppingListPagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/shopping-lists'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingListPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_shopping_lists_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete(project_key, store_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete_with_http_info(project_key, store_key, key, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete_with_http_info(project_key, store_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a shopping list by Key.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get_with_http_info(project_key, store_key, key, opts)
      data
    end

    # Gets a shopping list by Key.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a shopping list found by its Key.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post_with_http_info(project_key, store_key, key, opts)
      data
    end

    # Update a shopping list found by its Key.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_shopping_lists_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_shopping_lists_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_shopping_lists_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/shopping-lists'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_shopping_lists_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerDraft] :body
    # @return [CustomerSignInResult]
    def by_project_key_in_store_key_by_store_key_me_signup_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_me_signup_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerDraft] :body
    # @return [Array<(CustomerSignInResult, Integer, Hash)>] CustomerSignInResult data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_me_signup_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_me_signup_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_signup_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_me_signup_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/me/signup'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerSignInResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_me_signup_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_orders_by_id_delete(project_key, store_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_orders_by_id_delete_with_http_info(project_key, store_key, id, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_orders_by_id_delete_with_http_info(project_key, store_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/orders/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_orders_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an order by its ID from a specific Store. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_orders_by_id_get(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_orders_by_id_get_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Returns an order by its ID from a specific Store. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_orders_by_id_get_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/orders/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_orders_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an order in the store specified by {storeKey}. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [OrderUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_orders_by_id_post(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_orders_by_id_post_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Updates an order in the store specified by {storeKey}. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [OrderUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_orders_by_id_post_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/orders/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_orders_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries orders in a specific Store.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [OrderPagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_orders_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_orders_get_with_http_info(project_key, store_key, opts)
      data
    end

    # Queries orders in a specific Store.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(OrderPagedQueryResponse, Integer, Hash)>] OrderPagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_orders_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_orders_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/orders'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_orders_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param order_number
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete(project_key, store_key, order_number, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete_with_http_info(project_key, store_key, order_number, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param order_number
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete_with_http_info(project_key, store_key, order_number, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete"
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'orderNumber' + '}', order_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an order by its order number from a specific Store.  If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
    # @param project_key
    # @param store_key
    # @param order_number
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get(project_key, store_key, order_number, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get_with_http_info(project_key, store_key, order_number, opts)
      data
    end

    # Returns an order by its order number from a specific Store.  If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
    # @param project_key
    # @param store_key
    # @param order_number
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get_with_http_info(project_key, store_key, order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get"
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'orderNumber' + '}', order_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an order in the store specified by {storeKey}. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
    # @param project_key
    # @param store_key
    # @param order_number
    # @param [Hash] opts the optional parameters
    # @option opts [OrderUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post(project_key, store_key, order_number, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post_with_http_info(project_key, store_key, order_number, opts)
      data
    end

    # Updates an order in the store specified by {storeKey}. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
    # @param project_key
    # @param store_key
    # @param order_number
    # @param [Hash] opts the optional parameters
    # @option opts [OrderUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post_with_http_info(project_key, store_key, order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post"
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'orderNumber' + '}', order_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an order from a Cart from a specific Store. When using this endpoint the orders's store field is always set to the store specified in the path parameter. The cart must have a shipping address set before creating an order. When using the Platform TaxMode, the shipping address is used for tax calculation.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderFromCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_in_store_key_by_store_key_orders_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_orders_post_with_http_info(project_key, store_key, opts)
      data
    end

    # Creates an order from a Cart from a specific Store. When using this endpoint the orders&#x27;s store field is always set to the store specified in the path parameter. The cart must have a shipping address set before creating an order. When using the Platform TaxMode, the shipping address is used for tax calculation.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderFromCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_orders_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_orders_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_orders_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/orders'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_orders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID from the specified Store.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductProjection]
    def by_project_key_in_store_key_by_store_key_product_projections_by_id_get(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_product_projections_by_id_get_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID from the specified Store.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductProjection, Integer, Hash)>] ProductProjection data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_product_projections_by_id_get_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_product_projections_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_product_projections_by_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_product_projections_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_product_projections_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/product-projections/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductProjection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_product_projections_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key from the specified Store.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductProjection]
    def by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get_with_http_info(project_key, store_key, key, opts)
      data
    end

    # Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key from the specified Store.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductProjection, Integer, Hash)>] ProductProjection data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/product-projections/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductProjection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries Product Selection assignments in a specific Store.  The response will include duplicate Products whenever more than one active Product Selection of the Store includes a Product. To make clear through which Product Selection a Product is available in the Store the response contains assignments including both the Product and the Product Selection. Only Products of Product Selections that are activated in Store will be returned.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<Expansion>] :expand
    # @return [ProductsInStorePagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_product_selection_assignments_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_product_selection_assignments_get_with_http_info(project_key, store_key, opts)
      data
    end

    # Queries Product Selection assignments in a specific Store.  The response will include duplicate Products whenever more than one active Product Selection of the Store includes a Product. To make clear through which Product Selection a Product is available in the Store the response contains assignments including both the Product and the Product Selection. Only Products of Product Selections that are activated in Store will be returned.
    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductsInStorePagedQueryResponse, Integer, Hash)>] ProductsInStorePagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_product_selection_assignments_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_product_selection_assignments_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_product_selection_assignments_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_product_selection_assignments_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/product-selection-assignments'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductsInStorePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_product_selection_assignments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart in a given Store. Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
    # @param project_key
    # @param store_key
    # @param cart_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethodPagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get(project_key, store_key, cart_id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get_with_http_info(project_key, store_key, cart_id, opts)
      data
    end

    # Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart in a given Store. Each ShippingMethod contains exactly one ShippingRate with the flag &#x60;isMatching&#x60; set to &#x60;true&#x60;. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
    # @param project_key
    # @param store_key
    # @param cart_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethodPagedQueryResponse, Integer, Hash)>] ShippingMethodPagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get_with_http_info(project_key, store_key, cart_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get"
      end
      # verify the required parameter 'cart_id' is set
      if @api_client.config.client_side_validation && cart_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cartId] = cart_id
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethodPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete(project_key, store_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete_with_http_info(project_key, store_key, id, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete_with_http_info(project_key, store_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a shopping list by ID.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get_with_http_info(project_key, store_key, id, opts)
      data
    end

    # Gets a shopping list by ID.
    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post(project_key, store_key, id, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post_with_http_info(project_key, store_key, id, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post_with_http_info(project_key, store_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ShoppingListPagedQueryResponse]
    def by_project_key_in_store_key_by_store_key_shopping_lists_get(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shopping_lists_get_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ShoppingListPagedQueryResponse, Integer, Hash)>] ShoppingListPagedQueryResponse data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shopping_lists_get_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shopping-lists'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingListPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shopping_lists_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete(project_key, store_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete_with_http_info(project_key, store_key, key, version, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete_with_http_info(project_key, store_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a shopping list by Key.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get_with_http_info(project_key, store_key, key, opts)
      data
    end

    # Gets a shopping list by Key.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a shopping list found by its Key.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post(project_key, store_key, key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post_with_http_info(project_key, store_key, key, opts)
      data
    end

    # Update a shopping list found by its Key.
    # @param project_key
    # @param store_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post_with_http_info(project_key, store_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_in_store_key_by_store_key_shopping_lists_post(project_key, store_key, opts = {})
      data, _status_code, _headers = by_project_key_in_store_key_by_store_key_shopping_lists_post_with_http_info(project_key, store_key, opts)
      data
    end

    # @param project_key
    # @param store_key
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_in_store_key_by_store_key_shopping_lists_post_with_http_info(project_key, store_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_post"
      end
      # verify the required parameter 'store_key' is set
      if @api_client.config.client_side_validation && store_key.nil?
        fail ArgumentError, "Missing the required parameter 'store_key' when calling DefaultApi.by_project_key_in_store_key_by_store_key_shopping_lists_post"
      end

      # resource path
      local_var_path = '/{projectKey}/in-store/key={storeKey}/shopping-lists'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'storeKey' + '}', store_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_in_store_key_by_store_key_shopping_lists_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Produces the [InventoryEntryDeletedMessage](ctp:api:type:InventoryEntryDeletedMessage).
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [InventoryEntry]
    def by_project_key_inventory_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_inventory_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # Produces the [InventoryEntryDeletedMessage](ctp:api:type:InventoryEntryDeletedMessage).
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(InventoryEntry, Integer, Hash)>] InventoryEntry data, response status code and response headers
    def by_project_key_inventory_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_inventory_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_inventory_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_inventory_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_inventory_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/inventory/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InventoryEntry'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_inventory_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [InventoryEntry]
    def by_project_key_inventory_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_inventory_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(InventoryEntry, Integer, Hash)>] InventoryEntry data, response status code and response headers
    def by_project_key_inventory_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_inventory_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_inventory_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_inventory_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/inventory/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InventoryEntry'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_inventory_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryEntryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [InventoryEntry]
    def by_project_key_inventory_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_inventory_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryEntryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(InventoryEntry, Integer, Hash)>] InventoryEntry data, response status code and response headers
    def by_project_key_inventory_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_inventory_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_inventory_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_inventory_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/inventory/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InventoryEntry'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_inventory_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [InventoryPagedQueryResponse]
    def by_project_key_inventory_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_inventory_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(InventoryPagedQueryResponse, Integer, Hash)>] InventoryPagedQueryResponse data, response status code and response headers
    def by_project_key_inventory_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_inventory_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_inventory_get"
      end

      # resource path
      local_var_path = '/{projectKey}/inventory'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InventoryPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_inventory_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Produces the [InventoryEntryDeletedMessage](ctp:api:type:InventoryEntryDeletedMessage).
    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [InventoryEntry]
    def by_project_key_inventory_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_inventory_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # Produces the [InventoryEntryDeletedMessage](ctp:api:type:InventoryEntryDeletedMessage).
    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(InventoryEntry, Integer, Hash)>] InventoryEntry data, response status code and response headers
    def by_project_key_inventory_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_inventory_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_inventory_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_inventory_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_inventory_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/inventory/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InventoryEntry'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_inventory_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [InventoryEntry]
    def by_project_key_inventory_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_inventory_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(InventoryEntry, Integer, Hash)>] InventoryEntry data, response status code and response headers
    def by_project_key_inventory_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_inventory_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_inventory_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_inventory_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/inventory/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InventoryEntry'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_inventory_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryEntryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [InventoryEntry]
    def by_project_key_inventory_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_inventory_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryEntryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(InventoryEntry, Integer, Hash)>] InventoryEntry data, response status code and response headers
    def by_project_key_inventory_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_inventory_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_inventory_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_inventory_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/inventory/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InventoryEntry'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_inventory_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Produces the [InventoryEntryCreatedMessage](ctp:api:type:InventoryEntryCreatedMessage).
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryEntryDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [InventoryEntry]
    def by_project_key_inventory_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_inventory_post_with_http_info(project_key, opts)
      data
    end

    # Produces the [InventoryEntryCreatedMessage](ctp:api:type:InventoryEntryCreatedMessage).
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryEntryDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(InventoryEntry, Integer, Hash)>] InventoryEntry data, response status code and response headers
    def by_project_key_inventory_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_inventory_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_inventory_post"
      end

      # resource path
      local_var_path = '/{projectKey}/inventory'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InventoryEntry'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_inventory_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Authenticate Customer (Sign In). Retrieves the authenticated customer (a customer that matches the given email/password pair). If used with an access token for Anonymous Sessions, all orders and carts belonging to the anonymousId will be assigned to the newly created customer. If a cart is is returned as part of the CustomerSignInResult, it has been recalculated (It will have up-to-date prices, taxes and discounts, and invalid line items have been removed.).
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerSignin] :body
    # @return [CustomerSignInResult]
    def by_project_key_login_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_login_post_with_http_info(project_key, opts)
      data
    end

    # Authenticate Customer (Sign In). Retrieves the authenticated customer (a customer that matches the given email/password pair). If used with an access token for Anonymous Sessions, all orders and carts belonging to the anonymousId will be assigned to the newly created customer. If a cart is is returned as part of the CustomerSignInResult, it has been recalculated (It will have up-to-date prices, taxes and discounts, and invalid line items have been removed.).
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerSignin] :body
    # @return [Array<(CustomerSignInResult, Integer, Hash)>] CustomerSignInResult data, response status code and response headers
    def by_project_key_login_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_login_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_login_post"
      end

      # resource path
      local_var_path = '/{projectKey}/login'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerSignInResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [Cart]
    def by_project_key_me_active_cart_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_active_cart_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_active_cart_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_active_cart_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_active_cart_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/active-cart'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_active_cart_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_me_carts_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_carts_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_carts_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_carts_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_me_carts_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_carts_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_carts_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_me_carts_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_carts_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_carts_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [CartPagedQueryResponse]
    def by_project_key_me_carts_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(CartPagedQueryResponse, Integer, Hash)>] CartPagedQueryResponse data, response status code and response headers
    def by_project_key_me_carts_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'CartPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_me_carts_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_carts_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_carts_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_carts_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_me_carts_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_carts_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_carts_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_me_carts_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_carts_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_carts_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Cart]
    def by_project_key_me_carts_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_carts_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ReplicaMyCartDraft] :body
    # @return [Cart]
    def by_project_key_me_carts_replicate_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_carts_replicate_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ReplicaMyCartDraft] :body
    # @return [Array<(Cart, Integer, Hash)>] Cart data, response status code and response headers
    def by_project_key_me_carts_replicate_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_carts_replicate_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_carts_replicate_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/carts/replicate'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Cart'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_carts_replicate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete my Customer
    # @param project_key
    # @param version
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def by_project_key_me_delete(project_key, version, opts = {})
      data, _status_code, _headers = by_project_key_me_delete_with_http_info(project_key, version, opts)
      data
    end

    # Delete my Customer
    # @param project_key
    # @param version
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_me_delete_with_http_info(project_key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerEmailVerify] :body
    # @return [Customer]
    def by_project_key_me_email_confirm_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_email_confirm_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [CustomerEmailVerify] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_me_email_confirm_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_email_confirm_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_email_confirm_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/email/confirm'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_email_confirm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Customer]
    def by_project_key_me_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_me_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerSignin] :body
    # @return [CustomerSignInResult]
    def by_project_key_me_login_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_login_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerSignin] :body
    # @return [Array<(CustomerSignInResult, Integer, Hash)>] CustomerSignInResult data, response status code and response headers
    def by_project_key_me_login_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_login_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_login_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/login'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerSignInResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_me_orders_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_orders_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_me_orders_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_orders_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_orders_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_orders_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/orders/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_orders_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [OrderPagedQueryResponse]
    def by_project_key_me_orders_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_orders_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(OrderPagedQueryResponse, Integer, Hash)>] OrderPagedQueryResponse data, response status code and response headers
    def by_project_key_me_orders_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_orders_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_orders_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/orders'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_orders_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyOrderFromCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_me_orders_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_orders_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyOrderFromCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_me_orders_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_orders_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_orders_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/orders'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_orders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerChangePassword] :body
    # @return [Customer]
    def by_project_key_me_password_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_password_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerChangePassword] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_me_password_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_password_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_password_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/password'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_password_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerResetPassword] :body
    # @return [Customer]
    def by_project_key_me_password_reset_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_password_reset_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerResetPassword] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_me_password_reset_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_password_reset_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_password_reset_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/password/reset'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_password_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [MyPayment]
    def by_project_key_me_payments_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_me_payments_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(MyPayment, Integer, Hash)>] MyPayment data, response status code and response headers
    def by_project_key_me_payments_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_payments_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_payments_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_payments_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_payments_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me/payments/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'MyPayment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_payments_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [MyPayment]
    def by_project_key_me_payments_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_payments_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(MyPayment, Integer, Hash)>] MyPayment data, response status code and response headers
    def by_project_key_me_payments_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_payments_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_payments_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_payments_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/payments/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'MyPayment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_payments_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyPaymentUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [MyPayment]
    def by_project_key_me_payments_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_payments_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyPaymentUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(MyPayment, Integer, Hash)>] MyPayment data, response status code and response headers
    def by_project_key_me_payments_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_payments_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_payments_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_payments_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/payments/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'MyPayment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_payments_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [MyPaymentPagedQueryResponse]
    def by_project_key_me_payments_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_payments_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(MyPaymentPagedQueryResponse, Integer, Hash)>] MyPaymentPagedQueryResponse data, response status code and response headers
    def by_project_key_me_payments_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_payments_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_payments_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/payments'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'MyPaymentPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_payments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [MyPayment]
    def by_project_key_me_payments_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_me_payments_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(MyPayment, Integer, Hash)>] MyPayment data, response status code and response headers
    def by_project_key_me_payments_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_payments_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_payments_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_payments_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_payments_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me/payments/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'MyPayment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_payments_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [MyPayment]
    def by_project_key_me_payments_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_me_payments_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(MyPayment, Integer, Hash)>] MyPayment data, response status code and response headers
    def by_project_key_me_payments_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_payments_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_payments_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_payments_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/payments/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'MyPayment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_payments_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyPaymentUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [MyPayment]
    def by_project_key_me_payments_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_me_payments_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyPaymentUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(MyPayment, Integer, Hash)>] MyPayment data, response status code and response headers
    def by_project_key_me_payments_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_payments_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_payments_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_payments_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/payments/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'MyPayment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_payments_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyPaymentDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [MyPayment]
    def by_project_key_me_payments_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_payments_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyPaymentDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(MyPayment, Integer, Hash)>] MyPayment data, response status code and response headers
    def by_project_key_me_payments_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_payments_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_payments_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/payments'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'MyPayment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_payments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update my customer
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerUpdate] :body
    # @return [Customer]
    def by_project_key_me_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_post_with_http_info(project_key, opts)
      data
    end

    # Update my customer
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerUpdate] :body
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def by_project_key_me_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Customer'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_me_quote_requests_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_me_quote_requests_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_me_quote_requests_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_quote_requests_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_quote_requests_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_quote_requests_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_quote_requests_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me/quote-requests/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_quote_requests_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_me_quote_requests_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_quote_requests_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_me_quote_requests_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_quote_requests_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_quote_requests_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_quote_requests_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/quote-requests/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_quote_requests_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyQuoteRequestUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_me_quote_requests_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_quote_requests_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyQuoteRequestUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_me_quote_requests_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_quote_requests_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_quote_requests_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_quote_requests_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/quote-requests/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_quote_requests_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [QuoteRequestPagedQueryResponse]
    def by_project_key_me_quote_requests_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_quote_requests_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(QuoteRequestPagedQueryResponse, Integer, Hash)>] QuoteRequestPagedQueryResponse data, response status code and response headers
    def by_project_key_me_quote_requests_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_quote_requests_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_quote_requests_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/quote-requests'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequestPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_quote_requests_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_me_quote_requests_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_me_quote_requests_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_me_quote_requests_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_quote_requests_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_quote_requests_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_quote_requests_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_quote_requests_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me/quote-requests/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_quote_requests_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_me_quote_requests_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_me_quote_requests_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_me_quote_requests_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_quote_requests_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_quote_requests_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_quote_requests_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/quote-requests/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_quote_requests_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyQuoteRequestUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_me_quote_requests_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_me_quote_requests_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyQuoteRequestUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_me_quote_requests_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_quote_requests_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_quote_requests_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_quote_requests_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/quote-requests/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_quote_requests_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyQuoteRequestDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_me_quote_requests_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_quote_requests_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyQuoteRequestDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_me_quote_requests_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_quote_requests_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_quote_requests_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/quote-requests'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_quote_requests_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_me_shopping_lists_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_me_shopping_lists_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_me_shopping_lists_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_shopping_lists_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_shopping_lists_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_shopping_lists_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_me_shopping_lists_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_shopping_lists_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_me_shopping_lists_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_shopping_lists_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_shopping_lists_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_shopping_lists_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_shopping_lists_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_me_shopping_lists_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_me_shopping_lists_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_me_shopping_lists_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_shopping_lists_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_shopping_lists_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_me_shopping_lists_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_shopping_lists_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ShoppingListPagedQueryResponse]
    def by_project_key_me_shopping_lists_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_shopping_lists_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ShoppingListPagedQueryResponse, Integer, Hash)>] ShoppingListPagedQueryResponse data, response status code and response headers
    def by_project_key_me_shopping_lists_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_shopping_lists_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_shopping_lists_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/shopping-lists'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingListPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_shopping_lists_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_me_shopping_lists_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_me_shopping_lists_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_me_shopping_lists_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_shopping_lists_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_me_shopping_lists_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/me/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_shopping_lists_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_me_shopping_lists_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_me_shopping_lists_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_me_shopping_lists_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_shopping_lists_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_shopping_lists_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_shopping_lists_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/me/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_shopping_lists_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_me_shopping_lists_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_me_shopping_lists_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_me_shopping_lists_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_shopping_lists_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_shopping_lists_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_me_shopping_lists_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_shopping_lists_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_me_shopping_lists_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_shopping_lists_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyShoppingListDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_me_shopping_lists_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_shopping_lists_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_shopping_lists_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/shopping-lists'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_shopping_lists_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerDraft] :body
    # @return [CustomerSignInResult]
    def by_project_key_me_signup_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_me_signup_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [MyCustomerDraft] :body
    # @return [Array<(CustomerSignInResult, Integer, Hash)>] CustomerSignInResult data, response status code and response headers
    def by_project_key_me_signup_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_me_signup_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_me_signup_post"
      end

      # resource path
      local_var_path = '/{projectKey}/me/signup'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'CustomerSignInResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_me_signup_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Message]
    def by_project_key_messages_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_messages_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Message, Integer, Hash)>] Message data, response status code and response headers
    def by_project_key_messages_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_messages_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_messages_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_messages_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/messages/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Message'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_messages_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [MessagePagedQueryResponse]
    def by_project_key_messages_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_messages_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(MessagePagedQueryResponse, Integer, Hash)>] MessagePagedQueryResponse data, response status code and response headers
    def by_project_key_messages_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_messages_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_messages_get"
      end

      # resource path
      local_var_path = '/{projectKey}/messages'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'MessagePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_messages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_orders_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_orders_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_orders_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_orders_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_orders_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_orders_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_orders_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_orders_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_orders_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [OrderUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_orders_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_orders_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [OrderUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_orders_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_orders_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [OrderEditApply] :body
    # @return [OrderEdit]
    def by_project_key_orders_edits_by_id_apply_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_by_id_apply_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [OrderEditApply] :body
    # @return [Array<(OrderEdit, Integer, Hash)>] OrderEdit data, response status code and response headers
    def by_project_key_orders_edits_by_id_apply_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_by_id_apply_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_by_id_apply_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_orders_edits_by_id_apply_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits/{ID}/apply'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'OrderEdit'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_by_id_apply_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [OrderEdit]
    def by_project_key_orders_edits_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(OrderEdit, Integer, Hash)>] OrderEdit data, response status code and response headers
    def by_project_key_orders_edits_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_orders_edits_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_orders_edits_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderEdit'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [OrderEdit]
    def by_project_key_orders_edits_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(OrderEdit, Integer, Hash)>] OrderEdit data, response status code and response headers
    def by_project_key_orders_edits_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_orders_edits_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderEdit'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [OrderEditUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [OrderEdit]
    def by_project_key_orders_edits_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [OrderEditUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(OrderEdit, Integer, Hash)>] OrderEdit data, response status code and response headers
    def by_project_key_orders_edits_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_orders_edits_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'OrderEdit'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [OrderEditPagedQueryResponse]
    def by_project_key_orders_edits_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(OrderEditPagedQueryResponse, Integer, Hash)>] OrderEditPagedQueryResponse data, response status code and response headers
    def by_project_key_orders_edits_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_get"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderEditPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [OrderEdit]
    def by_project_key_orders_edits_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(OrderEdit, Integer, Hash)>] OrderEdit data, response status code and response headers
    def by_project_key_orders_edits_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_orders_edits_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_orders_edits_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderEdit'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [OrderEdit]
    def by_project_key_orders_edits_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(OrderEdit, Integer, Hash)>] OrderEdit data, response status code and response headers
    def by_project_key_orders_edits_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_orders_edits_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderEdit'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderEditUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [OrderEdit]
    def by_project_key_orders_edits_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderEditUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(OrderEdit, Integer, Hash)>] OrderEdit data, response status code and response headers
    def by_project_key_orders_edits_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_orders_edits_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'OrderEdit'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderEditDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [OrderEdit]
    def by_project_key_orders_edits_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_orders_edits_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderEditDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(OrderEdit, Integer, Hash)>] OrderEdit data, response status code and response headers
    def by_project_key_orders_edits_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_edits_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_edits_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/edits'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'OrderEdit'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_edits_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [OrderPagedQueryResponse]
    def by_project_key_orders_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_orders_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(OrderPagedQueryResponse, Integer, Hash)>] OrderPagedQueryResponse data, response status code and response headers
    def by_project_key_orders_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_get"
      end

      # resource path
      local_var_path = '/{projectKey}/orders'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'OrderPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Order by Import
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderImportDraft] :body
    # @return [Order]
    def by_project_key_orders_import_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_orders_import_post_with_http_info(project_key, opts)
      data
    end

    # Create an Order by Import
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderImportDraft] :body
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_orders_import_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_import_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_import_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/import'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param order_number
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_orders_order_number_by_order_number_delete(project_key, order_number, version, opts = {})
      data, _status_code, _headers = by_project_key_orders_order_number_by_order_number_delete_with_http_info(project_key, order_number, version, opts)
      data
    end

    # @param project_key
    # @param order_number
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_orders_order_number_by_order_number_delete_with_http_info(project_key, order_number, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_order_number_by_order_number_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_order_number_by_order_number_delete"
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling DefaultApi.by_project_key_orders_order_number_by_order_number_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_orders_order_number_by_order_number_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/order-number={orderNumber}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'orderNumber' + '}', order_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_order_number_by_order_number_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
    # @param project_key
    # @param order_number
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_orders_order_number_by_order_number_get(project_key, order_number, opts = {})
      data, _status_code, _headers = by_project_key_orders_order_number_by_order_number_get_with_http_info(project_key, order_number, opts)
      data
    end

    # In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
    # @param project_key
    # @param order_number
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_orders_order_number_by_order_number_get_with_http_info(project_key, order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_order_number_by_order_number_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_order_number_by_order_number_get"
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling DefaultApi.by_project_key_orders_order_number_by_order_number_get"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/order-number={orderNumber}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'orderNumber' + '}', order_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_order_number_by_order_number_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param order_number
    # @param [Hash] opts the optional parameters
    # @option opts [OrderUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_orders_order_number_by_order_number_post(project_key, order_number, opts = {})
      data, _status_code, _headers = by_project_key_orders_order_number_by_order_number_post_with_http_info(project_key, order_number, opts)
      data
    end

    # @param project_key
    # @param order_number
    # @param [Hash] opts the optional parameters
    # @option opts [OrderUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_orders_order_number_by_order_number_post_with_http_info(project_key, order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_order_number_by_order_number_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_order_number_by_order_number_post"
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling DefaultApi.by_project_key_orders_order_number_by_order_number_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/order-number={orderNumber}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'orderNumber' + '}', order_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_order_number_by_order_number_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an order from a Cart. The cart must have a shipping address set before creating an order. When using the Platform TaxMode, the shipping address is used for tax calculation.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderFromCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Order]
    def by_project_key_orders_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_orders_post_with_http_info(project_key, opts)
      data
    end

    # Creates an order from a Cart. The cart must have a shipping address set before creating an order. When using the Platform TaxMode, the shipping address is used for tax calculation.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderFromCartDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def by_project_key_orders_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Order'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks whether a search index for the Project's Orders exists.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def by_project_key_orders_search_head(project_key, opts = {})
      by_project_key_orders_search_head_with_http_info(project_key, opts)
      nil
    end

    # Checks whether a search index for the Project&#x27;s Orders exists.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def by_project_key_orders_search_head_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_search_head ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_search_head"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/search'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_search_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderSearchRequest] :body
    # @return [OrderPagedSearchResponse]
    def by_project_key_orders_search_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_orders_search_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [OrderSearchRequest] :body
    # @return [Array<(OrderPagedSearchResponse, Integer, Hash)>] OrderPagedSearchResponse data, response status code and response headers
    def by_project_key_orders_search_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_orders_search_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_orders_search_post"
      end

      # resource path
      local_var_path = '/{projectKey}/orders/search'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'OrderPagedSearchResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_orders_search_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Payment]
    def by_project_key_payments_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_payments_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def by_project_key_payments_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_payments_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_payments_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_payments_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_payments_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/payments/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Payment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_payments_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Payment]
    def by_project_key_payments_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_payments_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def by_project_key_payments_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_payments_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_payments_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_payments_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/payments/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Payment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_payments_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Payment]
    def by_project_key_payments_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_payments_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def by_project_key_payments_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_payments_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_payments_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_payments_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/payments/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Payment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_payments_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [PaymentPagedQueryResponse]
    def by_project_key_payments_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_payments_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(PaymentPagedQueryResponse, Integer, Hash)>] PaymentPagedQueryResponse data, response status code and response headers
    def by_project_key_payments_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_payments_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_payments_get"
      end

      # resource path
      local_var_path = '/{projectKey}/payments'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'PaymentPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_payments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Payment]
    def by_project_key_payments_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_payments_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def by_project_key_payments_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_payments_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_payments_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_payments_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_payments_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/payments/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Payment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_payments_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Payment]
    def by_project_key_payments_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_payments_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def by_project_key_payments_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_payments_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_payments_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_payments_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/payments/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Payment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_payments_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Payment]
    def by_project_key_payments_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_payments_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def by_project_key_payments_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_payments_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_payments_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_payments_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/payments/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Payment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_payments_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To create a payment object a payment draft object has to be given with the request.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Payment]
    def by_project_key_payments_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_payments_post_with_http_info(project_key, opts)
      data
    end

    # To create a payment object a payment draft object has to be given with the request.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def by_project_key_payments_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_payments_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_payments_post"
      end

      # resource path
      local_var_path = '/{projectKey}/payments'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Payment'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_payments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectUpdate] :body
    # @return [Project]
    def by_project_key_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectUpdate] :body
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def by_project_key_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Project'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductDiscount]
    def by_project_key_product_discounts_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductDiscount, Integer, Hash)>] ProductDiscount data, response status code and response headers
    def by_project_key_product_discounts_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_discounts_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_product_discounts_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductDiscount]
    def by_project_key_product_discounts_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductDiscount, Integer, Hash)>] ProductDiscount data, response status code and response headers
    def by_project_key_product_discounts_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_discounts_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDiscountUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductDiscount]
    def by_project_key_product_discounts_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDiscountUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductDiscount, Integer, Hash)>] ProductDiscount data, response status code and response headers
    def by_project_key_product_discounts_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_discounts_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ProductDiscountPagedQueryResponse]
    def by_project_key_product_discounts_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ProductDiscountPagedQueryResponse, Integer, Hash)>] ProductDiscountPagedQueryResponse data, response status code and response headers
    def by_project_key_product_discounts_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductDiscountPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductDiscount]
    def by_project_key_product_discounts_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductDiscount, Integer, Hash)>] ProductDiscount data, response status code and response headers
    def by_project_key_product_discounts_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_discounts_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_product_discounts_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductDiscount]
    def by_project_key_product_discounts_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductDiscount, Integer, Hash)>] ProductDiscount data, response status code and response headers
    def by_project_key_product_discounts_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_discounts_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDiscountUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductDiscount]
    def by_project_key_product_discounts_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDiscountUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductDiscount, Integer, Hash)>] ProductDiscount data, response status code and response headers
    def by_project_key_product_discounts_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_discounts_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # This endpoint can be used to simulate which Product Discounts would be applied if a specified Product Variant had a specified Price. Given Product and Product Variant IDs and a Price, this endpoint will return the [ProductDiscount](ctp:api:type:ProductDiscount) that would have been applied to that Price.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDiscountMatchQuery] :body
    # @return [ProductDiscount]
    def by_project_key_product_discounts_matching_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_matching_post_with_http_info(project_key, opts)
      data
    end

    # This endpoint can be used to simulate which Product Discounts would be applied if a specified Product Variant had a specified Price. Given Product and Product Variant IDs and a Price, this endpoint will return the [ProductDiscount](ctp:api:type:ProductDiscount) that would have been applied to that Price.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDiscountMatchQuery] :body
    # @return [Array<(ProductDiscount, Integer, Hash)>] ProductDiscount data, response status code and response headers
    def by_project_key_product_discounts_matching_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_matching_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_matching_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts/matching'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_matching_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDiscountDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductDiscount]
    def by_project_key_product_discounts_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_discounts_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDiscountDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductDiscount, Integer, Hash)>] ProductDiscount data, response status code and response headers
    def by_project_key_product_discounts_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_discounts_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_discounts_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-discounts'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductDiscount'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_discounts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current or staged representation of a product in a catalog by ID. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :staged
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [ProductProjection]
    def by_project_key_product_projections_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_product_projections_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # Gets the current or staged representation of a product in a catalog by ID. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :staged
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductProjection, Integer, Hash)>] ProductProjection data, response status code and response headers
    def by_project_key_product_projections_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_projections_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_projections_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_projections_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-projections/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:staged] = opts[:staged] if !opts[:staged].nil?
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductProjection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_projections_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # You can use the product projections query endpoint to get the current or staged representations of Products. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :staged
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ProductProjectionPagedQueryResponse]
    def by_project_key_product_projections_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_projections_get_with_http_info(project_key, opts)
      data
    end

    # You can use the product projections query endpoint to get the current or staged representations of Products. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :staged
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ProductProjectionPagedQueryResponse, Integer, Hash)>] ProductProjectionPagedQueryResponse data, response status code and response headers
    def by_project_key_product_projections_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_projections_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_projections_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-projections'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:staged] = opts[:staged] if !opts[:staged].nil?
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductProjectionPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_projections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current or staged representation of a product found by Key. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :staged
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [ProductProjection]
    def by_project_key_product_projections_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_product_projections_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # Gets the current or staged representation of a product found by Key. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :staged
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductProjection, Integer, Hash)>] ProductProjection data, response status code and response headers
    def by_project_key_product_projections_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_projections_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_projections_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_projections_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-projections/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:staged] = opts[:staged] if !opts[:staged].nil?
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductProjection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_projections_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Product Projection
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fuzzy
    # @option opts [Float] :fuzzy_level
    # @option opts [BOOLEAN] :mark_matching_variants
    # @option opts [BOOLEAN] :staged
    # @option opts [Array<String>] :filter
    # @option opts [Array<String>] :filter_facets
    # @option opts [Array<String>] :filter_query
    # @option opts [Array<String>] :facet
    # @option opts [Array<String>] :text__a_z2___a_z2
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [ProductProjectionPagedSearchResponse]
    def by_project_key_product_projections_search_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_projections_search_get_with_http_info(project_key, opts)
      data
    end

    # Search Product Projection
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fuzzy
    # @option opts [Float] :fuzzy_level
    # @option opts [BOOLEAN] :mark_matching_variants
    # @option opts [BOOLEAN] :staged
    # @option opts [Array<String>] :filter
    # @option opts [Array<String>] :filter_facets
    # @option opts [Array<String>] :filter_query
    # @option opts [Array<String>] :facet
    # @option opts [Array<String>] :text__a_z2___a_z2
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductProjectionPagedSearchResponse, Integer, Hash)>] ProductProjectionPagedSearchResponse data, response status code and response headers
    def by_project_key_product_projections_search_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_projections_search_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_projections_search_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-projections/search'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:fuzzy] = opts[:fuzzy] if !opts[:fuzzy].nil?
      query_params[:fuzzyLevel] = opts[:fuzzy_level] if !opts[:fuzzy_level].nil?
      query_params[:markMatchingVariants] = opts[:mark_matching_variants] if !opts[:mark_matching_variants].nil?
      query_params[:staged] = opts[:staged] if !opts[:staged].nil?
      query_params[:filter] = @api_client.build_collection_param(opts[:filter], :multi) if !opts[:filter].nil?
      query_params[:'filter.facets'] = @api_client.build_collection_param(opts[:filter_facets], :multi) if !opts[:filter_facets].nil?
      query_params[:'filter.query'] = @api_client.build_collection_param(opts[:filter_query], :multi) if !opts[:filter_query].nil?
      query_params[:facet] = @api_client.build_collection_param(opts[:facet], :multi) if !opts[:facet].nil?
      query_params[:'/text.[a-z]{2}(-[A-Z]{2})?/'] = @api_client.build_collection_param(opts[:text__a_z2___a_z2], :multi) if !opts[:text__a_z2___a_z2].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductProjectionPagedSearchResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_projections_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Product Projection
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [ProductProjectionPagedSearchResponse]
    def by_project_key_product_projections_search_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_projections_search_post_with_http_info(project_key, opts)
      data
    end

    # Search Product Projection
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductProjectionPagedSearchResponse, Integer, Hash)>] ProductProjectionPagedSearchResponse data, response status code and response headers
    def by_project_key_product_projections_search_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_projections_search_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_projections_search_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-projections/search'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductProjectionPagedSearchResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_projections_search_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fuzzy
    # @option opts [BOOLEAN] :staged
    # @option opts [Array<String>] :search_keywords__a_z2___a_z2
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @return [SuggestionResult]
    def by_project_key_product_projections_suggest_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_projections_suggest_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :fuzzy
    # @option opts [BOOLEAN] :staged
    # @option opts [Array<String>] :search_keywords__a_z2___a_z2
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @return [Array<(SuggestionResult, Integer, Hash)>] SuggestionResult data, response status code and response headers
    def by_project_key_product_projections_suggest_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_projections_suggest_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_projections_suggest_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-projections/suggest'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:fuzzy] = opts[:fuzzy] if !opts[:fuzzy].nil?
      query_params[:staged] = opts[:staged] if !opts[:staged].nil?
      query_params[:'/searchKeywords.[a-z]{2}(-[A-Z]{2})?/'] = @api_client.build_collection_param(opts[:search_keywords__a_z2___a_z2], :multi) if !opts[:search_keywords__a_z2___a_z2].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'SuggestionResult'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_projections_suggest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductSelection]
    def by_project_key_product_selections_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductSelection, Integer, Hash)>] ProductSelection data, response status code and response headers
    def by_project_key_product_selections_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_selections_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_product_selections_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductSelection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductSelection]
    def by_project_key_product_selections_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductSelection, Integer, Hash)>] ProductSelection data, response status code and response headers
    def by_project_key_product_selections_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_selections_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductSelection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ProductSelectionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductSelection]
    def by_project_key_product_selections_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ProductSelectionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductSelection, Integer, Hash)>] ProductSelection data, response status code and response headers
    def by_project_key_product_selections_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_selections_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductSelection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @return [ProductSelectionProductPagedQueryResponse]
    def by_project_key_product_selections_by_id_products_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_by_id_products_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @return [Array<(ProductSelectionProductPagedQueryResponse, Integer, Hash)>] ProductSelectionProductPagedQueryResponse data, response status code and response headers
    def by_project_key_product_selections_by_id_products_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_by_id_products_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_by_id_products_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_selections_by_id_products_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections/{ID}/products'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductSelectionProductPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_by_id_products_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ProductSelectionPagedQueryResponse]
    def by_project_key_product_selections_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ProductSelectionPagedQueryResponse, Integer, Hash)>] ProductSelectionPagedQueryResponse data, response status code and response headers
    def by_project_key_product_selections_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductSelectionPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductSelection]
    def by_project_key_product_selections_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductSelection, Integer, Hash)>] ProductSelection data, response status code and response headers
    def by_project_key_product_selections_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_selections_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_product_selections_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductSelection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductSelection]
    def by_project_key_product_selections_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductSelection, Integer, Hash)>] ProductSelection data, response status code and response headers
    def by_project_key_product_selections_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_selections_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductSelection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductSelectionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductSelection]
    def by_project_key_product_selections_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductSelectionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductSelection, Integer, Hash)>] ProductSelection data, response status code and response headers
    def by_project_key_product_selections_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_selections_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductSelection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @return [ProductSelectionProductPagedQueryResponse]
    def by_project_key_product_selections_key_by_key_products_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_key_by_key_products_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @return [Array<(ProductSelectionProductPagedQueryResponse, Integer, Hash)>] ProductSelectionProductPagedQueryResponse data, response status code and response headers
    def by_project_key_product_selections_key_by_key_products_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_key_by_key_products_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_key_by_key_products_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_selections_key_by_key_products_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections/key={key}/products'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductSelectionProductPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_key_by_key_products_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductSelectionDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductSelection]
    def by_project_key_product_selections_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_selections_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductSelectionDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductSelection, Integer, Hash)>] ProductSelection data, response status code and response headers
    def by_project_key_product_selections_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_selections_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_selections_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-selections'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductSelection'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_selections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductType]
    def by_project_key_product_types_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_product_types_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductType, Integer, Hash)>] ProductType data, response status code and response headers
    def by_project_key_product_types_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_types_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_product_types_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductType'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductType]
    def by_project_key_product_types_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_product_types_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductType, Integer, Hash)>] ProductType data, response status code and response headers
    def by_project_key_product_types_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_types_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductType'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks if a Product Type with given `id` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def by_project_key_product_types_by_id_head(project_key, id, opts = {})
      by_project_key_product_types_by_id_head_with_http_info(project_key, id, opts)
      nil
    end

    # Checks if a Product Type with given &#x60;id&#x60; exists. Responds with a &#x60;200 OK&#x60; status if the &#x60;Product Type&#x60; exists or &#x60;404 Not Found&#x60; otherwise.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def by_project_key_product_types_by_id_head_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_by_id_head ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_by_id_head"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_types_by_id_head"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_by_id_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ProductTypeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductType]
    def by_project_key_product_types_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_product_types_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ProductTypeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductType, Integer, Hash)>] ProductType data, response status code and response headers
    def by_project_key_product_types_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_product_types_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductType'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ProductTypePagedQueryResponse]
    def by_project_key_product_types_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_types_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ProductTypePagedQueryResponse, Integer, Hash)>] ProductTypePagedQueryResponse data, response status code and response headers
    def by_project_key_product_types_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductTypePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if Product Types exist. Responds with a `200 OK` status if any Product Types match the Query Predicate, or `404 Not Found` otherwise.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [QueryPredicate] :where
    # @return [nil]
    def by_project_key_product_types_head(project_key, opts = {})
      by_project_key_product_types_head_with_http_info(project_key, opts)
      nil
    end

    # Check if Product Types exist. Responds with a &#x60;200 OK&#x60; status if any Product Types match the Query Predicate, or &#x60;404 Not Found&#x60; otherwise.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [QueryPredicate] :where
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def by_project_key_product_types_head_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_head ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_head"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:where] = opts[:where] if !opts[:where].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductType]
    def by_project_key_product_types_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_product_types_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductType, Integer, Hash)>] ProductType data, response status code and response headers
    def by_project_key_product_types_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_types_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_product_types_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductType'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ProductType]
    def by_project_key_product_types_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_product_types_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductType, Integer, Hash)>] ProductType data, response status code and response headers
    def by_project_key_product_types_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_types_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductType'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks if a Product Type with given `key` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def by_project_key_product_types_key_by_key_head(project_key, key, opts = {})
      by_project_key_product_types_key_by_key_head_with_http_info(project_key, key, opts)
      nil
    end

    # Checks if a Product Type with given &#x60;key&#x60; exists. Responds with a &#x60;200 OK&#x60; status if the &#x60;Product Type&#x60; exists or &#x60;404 Not Found&#x60; otherwise.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def by_project_key_product_types_key_by_key_head_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_key_by_key_head ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_key_by_key_head"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_types_key_by_key_head"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_key_by_key_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductTypeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductType]
    def by_project_key_product_types_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_product_types_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductTypeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductType, Integer, Hash)>] ProductType data, response status code and response headers
    def by_project_key_product_types_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_product_types_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductType'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductTypeDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ProductType]
    def by_project_key_product_types_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_product_types_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductTypeDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ProductType, Integer, Hash)>] ProductType data, response status code and response headers
    def by_project_key_product_types_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_product_types_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_product_types_post"
      end

      # resource path
      local_var_path = '/{projectKey}/product-types'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ProductType'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_product_types_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Product]
    def by_project_key_products_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_products_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def by_project_key_products_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_products_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_products_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/products/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Product'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the full representation of a product by ID.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Product]
    def by_project_key_products_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_products_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # Gets the full representation of a product by ID.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def by_project_key_products_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_products_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/products/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Product'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks if product with given ID exists.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def by_project_key_products_by_id_head(project_key, id, opts = {})
      by_project_key_products_by_id_head_with_http_info(project_key, id, opts)
      nil
    end

    # Checks if product with given ID exists.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def by_project_key_products_by_id_head_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_by_id_head ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_by_id_head"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_products_by_id_head"
      end

      # resource path
      local_var_path = '/{projectKey}/products/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_by_id_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uploads a binary image file to a given product variant. The supported image formats are JPEG, PNG and GIF.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body
    # @option opts [String] :filename
    # @option opts [Float] :variant
    # @option opts [String] :sku
    # @option opts [BOOLEAN] :staged
    # @return [Product]
    def by_project_key_products_by_id_images_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_products_by_id_images_post_with_http_info(project_key, id, opts)
      data
    end

    # Uploads a binary image file to a given product variant. The supported image formats are JPEG, PNG and GIF.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body
    # @option opts [String] :filename
    # @option opts [Float] :variant
    # @option opts [String] :sku
    # @option opts [BOOLEAN] :staged
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def by_project_key_products_by_id_images_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_by_id_images_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_by_id_images_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_products_by_id_images_post"
      end

      # resource path
      local_var_path = '/{projectKey}/products/{ID}/images'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:filename] = opts[:filename] if !opts[:filename].nil?
      query_params[:variant] = opts[:variant] if !opts[:variant].nil?
      query_params[:sku] = opts[:sku] if !opts[:sku].nil?
      query_params[:staged] = opts[:staged] if !opts[:staged].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Product'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_by_id_images_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ProductUpdate] :body
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Product]
    def by_project_key_products_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_products_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ProductUpdate] :body
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def by_project_key_products_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_products_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/products/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Product'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [AssignedProductSelectionPagedQueryResponse]
    def by_project_key_products_by_id_product_selections_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_products_by_id_product_selections_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(AssignedProductSelectionPagedQueryResponse, Integer, Hash)>] AssignedProductSelectionPagedQueryResponse data, response status code and response headers
    def by_project_key_products_by_id_product_selections_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_by_id_product_selections_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_by_id_product_selections_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_products_by_id_product_selections_get"
      end

      # resource path
      local_var_path = '/{projectKey}/products/{ID}/product-selections'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'AssignedProductSelectionPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_by_id_product_selections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # You can use the query endpoint to get the full representations of products. REMARK: We suggest to use the performance optimized search endpoint which has a bunch functionalities, the query API lacks like sorting on custom attributes, etc.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ProductPagedQueryResponse]
    def by_project_key_products_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_products_get_with_http_info(project_key, opts)
      data
    end

    # You can use the query endpoint to get the full representations of products. REMARK: We suggest to use the performance optimized search endpoint which has a bunch functionalities, the query API lacks like sorting on custom attributes, etc.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ProductPagedQueryResponse, Integer, Hash)>] ProductPagedQueryResponse data, response status code and response headers
    def by_project_key_products_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_get"
      end

      # resource path
      local_var_path = '/{projectKey}/products'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ProductPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks if products exist.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def by_project_key_products_head(project_key, opts = {})
      by_project_key_products_head_with_http_info(project_key, opts)
      nil
    end

    # Checks if products exist.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def by_project_key_products_head_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_head ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_head"
      end

      # resource path
      local_var_path = '/{projectKey}/products'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Product]
    def by_project_key_products_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_products_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def by_project_key_products_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_products_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_products_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/products/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Product'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the full representation of a product by Key.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Product]
    def by_project_key_products_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_products_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # Gets the full representation of a product by Key.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def by_project_key_products_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_products_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/products/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Product'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks if product with given key exists.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def by_project_key_products_key_by_key_head(project_key, key, opts = {})
      by_project_key_products_key_by_key_head_with_http_info(project_key, key, opts)
      nil
    end

    # Checks if product with given key exists.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def by_project_key_products_key_by_key_head_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_key_by_key_head ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_key_by_key_head"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_products_key_by_key_head"
      end

      # resource path
      local_var_path = '/{projectKey}/products/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_key_by_key_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductUpdate] :body
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Product]
    def by_project_key_products_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_products_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductUpdate] :body
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def by_project_key_products_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_products_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/products/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Product'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [AssignedProductSelectionPagedQueryResponse]
    def by_project_key_products_key_by_key_product_selections_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_products_key_by_key_product_selections_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(AssignedProductSelectionPagedQueryResponse, Integer, Hash)>] AssignedProductSelectionPagedQueryResponse data, response status code and response headers
    def by_project_key_products_key_by_key_product_selections_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_key_by_key_product_selections_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_key_by_key_product_selections_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_products_key_by_key_product_selections_get"
      end

      # resource path
      local_var_path = '/{projectKey}/products/key={key}/product-selections'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'AssignedProductSelectionPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_key_by_key_product_selections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To create a new product, send a representation that is going to become the initial staged representation of the new product in the master catalog. If price selection query parameters are provided, the selected prices will be added to the response.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDraft] :body
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Product]
    def by_project_key_products_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_products_post_with_http_info(project_key, opts)
      data
    end

    # To create a new product, send a representation that is going to become the initial staged representation of the new product in the master catalog. If price selection query parameters are provided, the selected prices will be added to the response.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ProductDraft] :body
    # @option opts [String] :price_currency
    # @option opts [String] :price_country
    # @option opts [String] :price_customer_group
    # @option opts [String] :price_channel
    # @option opts [Array<String>] :locale_projection
    # @option opts [String] :store_projection
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def by_project_key_products_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_products_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_products_post"
      end

      # resource path
      local_var_path = '/{projectKey}/products'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:priceCurrency] = opts[:price_currency] if !opts[:price_currency].nil?
      query_params[:priceCountry] = opts[:price_country] if !opts[:price_country].nil?
      query_params[:priceCustomerGroup] = opts[:price_customer_group] if !opts[:price_customer_group].nil?
      query_params[:priceChannel] = opts[:price_channel] if !opts[:price_channel].nil?
      query_params[:localeProjection] = @api_client.build_collection_param(opts[:locale_projection], :multi) if !opts[:locale_projection].nil?
      query_params[:storeProjection] = opts[:store_projection] if !opts[:store_projection].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Product'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_products_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_quote_requests_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_quote_requests_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_quote_requests_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quote_requests_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quote_requests_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_quote_requests_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_quote_requests_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/quote-requests/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quote_requests_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_quote_requests_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_quote_requests_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_quote_requests_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quote_requests_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quote_requests_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_quote_requests_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/quote-requests/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quote_requests_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteRequestUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_quote_requests_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_quote_requests_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteRequestUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_quote_requests_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quote_requests_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quote_requests_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_quote_requests_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/quote-requests/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quote_requests_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [QuoteRequestPagedQueryResponse]
    def by_project_key_quote_requests_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_quote_requests_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(QuoteRequestPagedQueryResponse, Integer, Hash)>] QuoteRequestPagedQueryResponse data, response status code and response headers
    def by_project_key_quote_requests_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quote_requests_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quote_requests_get"
      end

      # resource path
      local_var_path = '/{projectKey}/quote-requests'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequestPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quote_requests_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_quote_requests_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_quote_requests_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_quote_requests_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quote_requests_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quote_requests_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_quote_requests_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_quote_requests_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/quote-requests/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quote_requests_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_quote_requests_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_quote_requests_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_quote_requests_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quote_requests_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quote_requests_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_quote_requests_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/quote-requests/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quote_requests_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteRequestUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_quote_requests_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_quote_requests_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteRequestUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_quote_requests_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quote_requests_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quote_requests_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_quote_requests_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/quote-requests/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quote_requests_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteRequestDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [QuoteRequest]
    def by_project_key_quote_requests_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_quote_requests_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteRequestDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(QuoteRequest, Integer, Hash)>] QuoteRequest data, response status code and response headers
    def by_project_key_quote_requests_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quote_requests_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quote_requests_post"
      end

      # resource path
      local_var_path = '/{projectKey}/quote-requests'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'QuoteRequest'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quote_requests_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Quote]
    def by_project_key_quotes_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_quotes_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def by_project_key_quotes_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quotes_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quotes_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_quotes_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_quotes_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/quotes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Quote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quotes_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Quote]
    def by_project_key_quotes_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_quotes_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def by_project_key_quotes_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quotes_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quotes_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_quotes_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/quotes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Quote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quotes_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Quote]
    def by_project_key_quotes_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_quotes_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def by_project_key_quotes_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quotes_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quotes_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_quotes_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/quotes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Quote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quotes_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [QuotePagedQueryResponse]
    def by_project_key_quotes_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_quotes_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(QuotePagedQueryResponse, Integer, Hash)>] QuotePagedQueryResponse data, response status code and response headers
    def by_project_key_quotes_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quotes_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quotes_get"
      end

      # resource path
      local_var_path = '/{projectKey}/quotes'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'QuotePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quotes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Quote]
    def by_project_key_quotes_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_quotes_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def by_project_key_quotes_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quotes_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quotes_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_quotes_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_quotes_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/quotes/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Quote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quotes_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Quote]
    def by_project_key_quotes_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_quotes_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def by_project_key_quotes_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quotes_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quotes_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_quotes_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/quotes/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Quote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quotes_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Quote]
    def by_project_key_quotes_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_quotes_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def by_project_key_quotes_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quotes_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quotes_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_quotes_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/quotes/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Quote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quotes_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Quote]
    def by_project_key_quotes_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_quotes_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [QuoteDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def by_project_key_quotes_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_quotes_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_quotes_post"
      end

      # resource path
      local_var_path = '/{projectKey}/quotes'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Quote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_quotes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Review]
    def by_project_key_reviews_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_reviews_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def by_project_key_reviews_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_reviews_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_reviews_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_reviews_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_reviews_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/reviews/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Review'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_reviews_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Review]
    def by_project_key_reviews_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_reviews_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def by_project_key_reviews_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_reviews_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_reviews_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_reviews_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/reviews/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Review'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_reviews_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ReviewUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Review]
    def by_project_key_reviews_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_reviews_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ReviewUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def by_project_key_reviews_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_reviews_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_reviews_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_reviews_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/reviews/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Review'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_reviews_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ReviewPagedQueryResponse]
    def by_project_key_reviews_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_reviews_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ReviewPagedQueryResponse, Integer, Hash)>] ReviewPagedQueryResponse data, response status code and response headers
    def by_project_key_reviews_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_reviews_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_reviews_get"
      end

      # resource path
      local_var_path = '/{projectKey}/reviews'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ReviewPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_reviews_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Review]
    def by_project_key_reviews_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_reviews_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def by_project_key_reviews_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_reviews_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_reviews_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_reviews_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_reviews_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/reviews/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Review'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_reviews_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Review]
    def by_project_key_reviews_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_reviews_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def by_project_key_reviews_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_reviews_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_reviews_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_reviews_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/reviews/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Review'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_reviews_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ReviewUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Review]
    def by_project_key_reviews_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_reviews_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ReviewUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def by_project_key_reviews_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_reviews_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_reviews_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_reviews_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/reviews/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Review'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_reviews_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ReviewDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Review]
    def by_project_key_reviews_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_reviews_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ReviewDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def by_project_key_reviews_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_reviews_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_reviews_post"
      end

      # resource path
      local_var_path = '/{projectKey}/reviews'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Review'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_reviews_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethod]
    def by_project_key_shipping_methods_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethod, Integer, Hash)>] ShippingMethod data, response status code and response headers
    def by_project_key_shipping_methods_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_shipping_methods_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_shipping_methods_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethod'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethod]
    def by_project_key_shipping_methods_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethod, Integer, Hash)>] ShippingMethod data, response status code and response headers
    def by_project_key_shipping_methods_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_shipping_methods_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethod'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ShippingMethodUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethod]
    def by_project_key_shipping_methods_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ShippingMethodUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethod, Integer, Hash)>] ShippingMethod data, response status code and response headers
    def by_project_key_shipping_methods_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_shipping_methods_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShippingMethod'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ShippingMethodPagedQueryResponse]
    def by_project_key_shipping_methods_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ShippingMethodPagedQueryResponse, Integer, Hash)>] ShippingMethodPagedQueryResponse data, response status code and response headers
    def by_project_key_shipping_methods_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethodPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethod]
    def by_project_key_shipping_methods_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethod, Integer, Hash)>] ShippingMethod data, response status code and response headers
    def by_project_key_shipping_methods_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_shipping_methods_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_shipping_methods_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethod'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethod]
    def by_project_key_shipping_methods_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethod, Integer, Hash)>] ShippingMethod data, response status code and response headers
    def by_project_key_shipping_methods_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_shipping_methods_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethod'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ShippingMethodUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethod]
    def by_project_key_shipping_methods_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ShippingMethodUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethod, Integer, Hash)>] ShippingMethod data, response status code and response headers
    def by_project_key_shipping_methods_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_shipping_methods_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShippingMethod'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart. Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
    # @param project_key
    # @param cart_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethodPagedQueryResponse]
    def by_project_key_shipping_methods_matching_cart_get(project_key, cart_id, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_matching_cart_get_with_http_info(project_key, cart_id, opts)
      data
    end

    # Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart. Each ShippingMethod contains exactly one ShippingRate with the flag &#x60;isMatching&#x60; set to &#x60;true&#x60;. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
    # @param project_key
    # @param cart_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethodPagedQueryResponse, Integer, Hash)>] ShippingMethodPagedQueryResponse data, response status code and response headers
    def by_project_key_shipping_methods_matching_cart_get_with_http_info(project_key, cart_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_matching_cart_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_matching_cart_get"
      end
      # verify the required parameter 'cart_id' is set
      if @api_client.config.client_side_validation && cart_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_id' when calling DefaultApi.by_project_key_shipping_methods_matching_cart_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/matching-cart'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cartId] = cart_id
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethodPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_matching_cart_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location). If the `currency` parameter is given, then the ShippingMethods must also have a rate defined in the specified currency. Each ShippingMethod contains at least one ShippingRate with the flag `isMatching` set to `true`. If the `currency` parameter is given, exactly one ShippingRate will contain it.
    # @param project_key
    # @param country
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state
    # @option opts [String] :currency
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @return [ShippingMethodPagedQueryResponse]
    def by_project_key_shipping_methods_matching_location_get(project_key, country, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_matching_location_get_with_http_info(project_key, country, opts)
      data
    end

    # Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location). If the &#x60;currency&#x60; parameter is given, then the ShippingMethods must also have a rate defined in the specified currency. Each ShippingMethod contains at least one ShippingRate with the flag &#x60;isMatching&#x60; set to &#x60;true&#x60;. If the &#x60;currency&#x60; parameter is given, exactly one ShippingRate will contain it.
    # @param project_key
    # @param country
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state
    # @option opts [String] :currency
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @return [Array<(ShippingMethodPagedQueryResponse, Integer, Hash)>] ShippingMethodPagedQueryResponse data, response status code and response headers
    def by_project_key_shipping_methods_matching_location_get_with_http_info(project_key, country, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_matching_location_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_matching_location_get"
      end
      # verify the required parameter 'country' is set
      if @api_client.config.client_side_validation && country.nil?
        fail ArgumentError, "Missing the required parameter 'country' when calling DefaultApi.by_project_key_shipping_methods_matching_location_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/matching-location'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:country] = country
      query_params[:state] = opts[:state] if !opts[:state].nil?
      query_params[:currency] = opts[:currency] if !opts[:currency].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethodPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_matching_location_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location) for an [OrderEdit](/projects/order-edits). In case the OrderEdit preview cannot be created an [EditPreviewFailed](ctp:api:type:EditPreviewFailedError) error is raised.
    # @param project_key
    # @param order_edit_id
    # @param country
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state
    # @return [ShippingMethodPagedQueryResponse]
    def by_project_key_shipping_methods_matching_orderedit_get(project_key, order_edit_id, country, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_matching_orderedit_get_with_http_info(project_key, order_edit_id, country, opts)
      data
    end

    # Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location) for an [OrderEdit](/projects/order-edits). In case the OrderEdit preview cannot be created an [EditPreviewFailed](ctp:api:type:EditPreviewFailedError) error is raised.
    # @param project_key
    # @param order_edit_id
    # @param country
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state
    # @return [Array<(ShippingMethodPagedQueryResponse, Integer, Hash)>] ShippingMethodPagedQueryResponse data, response status code and response headers
    def by_project_key_shipping_methods_matching_orderedit_get_with_http_info(project_key, order_edit_id, country, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_matching_orderedit_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_matching_orderedit_get"
      end
      # verify the required parameter 'order_edit_id' is set
      if @api_client.config.client_side_validation && order_edit_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_edit_id' when calling DefaultApi.by_project_key_shipping_methods_matching_orderedit_get"
      end
      # verify the required parameter 'country' is set
      if @api_client.config.client_side_validation && country.nil?
        fail ArgumentError, "Missing the required parameter 'country' when calling DefaultApi.by_project_key_shipping_methods_matching_orderedit_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods/matching-orderedit'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:orderEditId] = order_edit_id
      query_params[:country] = country
      query_params[:state] = opts[:state] if !opts[:state].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShippingMethodPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_matching_orderedit_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ShippingMethodDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShippingMethod]
    def by_project_key_shipping_methods_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_shipping_methods_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ShippingMethodDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShippingMethod, Integer, Hash)>] ShippingMethod data, response status code and response headers
    def by_project_key_shipping_methods_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shipping_methods_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shipping_methods_post"
      end

      # resource path
      local_var_path = '/{projectKey}/shipping-methods'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShippingMethod'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shipping_methods_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_shopping_lists_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_shopping_lists_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_shopping_lists_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shopping_lists_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_shopping_lists_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_shopping_lists_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shopping_lists_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a shopping list by ID.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_shopping_lists_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_shopping_lists_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # Gets a shopping list by ID.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_shopping_lists_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shopping_lists_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shopping_lists_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_shopping_lists_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shopping_lists_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_shopping_lists_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_shopping_lists_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_shopping_lists_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shopping_lists_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shopping_lists_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_shopping_lists_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/shopping-lists/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shopping_lists_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ShoppingListPagedQueryResponse]
    def by_project_key_shopping_lists_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_shopping_lists_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ShoppingListPagedQueryResponse, Integer, Hash)>] ShoppingListPagedQueryResponse data, response status code and response headers
    def by_project_key_shopping_lists_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shopping_lists_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shopping_lists_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shopping-lists'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingListPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shopping_lists_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_shopping_lists_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_shopping_lists_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_shopping_lists_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shopping_lists_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_shopping_lists_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_shopping_lists_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shopping_lists_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a shopping list by Key.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_shopping_lists_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_shopping_lists_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # Gets a shopping list by Key.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_shopping_lists_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shopping_lists_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shopping_lists_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_shopping_lists_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shopping_lists_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a shopping list found by its Key.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_shopping_lists_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_shopping_lists_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # Update a shopping list found by its Key.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_shopping_lists_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shopping_lists_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shopping_lists_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_shopping_lists_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/shopping-lists/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shopping_lists_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [ShoppingList]
    def by_project_key_shopping_lists_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_shopping_lists_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ShoppingListDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(ShoppingList, Integer, Hash)>] ShoppingList data, response status code and response headers
    def by_project_key_shopping_lists_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_shopping_lists_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_shopping_lists_post"
      end

      # resource path
      local_var_path = '/{projectKey}/shopping-lists'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'ShoppingList'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_shopping_lists_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [StagedQuote]
    def by_project_key_staged_quotes_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_staged_quotes_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StagedQuote, Integer, Hash)>] StagedQuote data, response status code and response headers
    def by_project_key_staged_quotes_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_staged_quotes_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_staged_quotes_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_staged_quotes_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_staged_quotes_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/staged-quotes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StagedQuote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_staged_quotes_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [StagedQuote]
    def by_project_key_staged_quotes_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_staged_quotes_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StagedQuote, Integer, Hash)>] StagedQuote data, response status code and response headers
    def by_project_key_staged_quotes_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_staged_quotes_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_staged_quotes_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_staged_quotes_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/staged-quotes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StagedQuote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_staged_quotes_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [StagedQuoteUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [StagedQuote]
    def by_project_key_staged_quotes_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_staged_quotes_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [StagedQuoteUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StagedQuote, Integer, Hash)>] StagedQuote data, response status code and response headers
    def by_project_key_staged_quotes_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_staged_quotes_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_staged_quotes_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_staged_quotes_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/staged-quotes/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'StagedQuote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_staged_quotes_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [StagedQuotePagedQueryResponse]
    def by_project_key_staged_quotes_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_staged_quotes_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(StagedQuotePagedQueryResponse, Integer, Hash)>] StagedQuotePagedQueryResponse data, response status code and response headers
    def by_project_key_staged_quotes_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_staged_quotes_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_staged_quotes_get"
      end

      # resource path
      local_var_path = '/{projectKey}/staged-quotes'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StagedQuotePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_staged_quotes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [StagedQuote]
    def by_project_key_staged_quotes_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_staged_quotes_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :data_erasure
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StagedQuote, Integer, Hash)>] StagedQuote data, response status code and response headers
    def by_project_key_staged_quotes_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_staged_quotes_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_staged_quotes_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_staged_quotes_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_staged_quotes_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/staged-quotes/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:dataErasure] = opts[:data_erasure] if !opts[:data_erasure].nil?
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StagedQuote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_staged_quotes_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [StagedQuote]
    def by_project_key_staged_quotes_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_staged_quotes_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StagedQuote, Integer, Hash)>] StagedQuote data, response status code and response headers
    def by_project_key_staged_quotes_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_staged_quotes_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_staged_quotes_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_staged_quotes_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/staged-quotes/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StagedQuote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_staged_quotes_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [StagedQuoteUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [StagedQuote]
    def by_project_key_staged_quotes_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_staged_quotes_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [StagedQuoteUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StagedQuote, Integer, Hash)>] StagedQuote data, response status code and response headers
    def by_project_key_staged_quotes_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_staged_quotes_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_staged_quotes_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_staged_quotes_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/staged-quotes/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'StagedQuote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_staged_quotes_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [StagedQuoteDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [StagedQuote]
    def by_project_key_staged_quotes_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_staged_quotes_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [StagedQuoteDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StagedQuote, Integer, Hash)>] StagedQuote data, response status code and response headers
    def by_project_key_staged_quotes_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_staged_quotes_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_staged_quotes_post"
      end

      # resource path
      local_var_path = '/{projectKey}/staged-quotes'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'StagedQuote'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_staged_quotes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Produces the [StandalonePriceDeletedMessage](ctp:api:type:StandalonePriceDeletedMessage).
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [StandalonePrice]
    def by_project_key_standalone_prices_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_standalone_prices_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # Produces the [StandalonePriceDeletedMessage](ctp:api:type:StandalonePriceDeletedMessage).
    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StandalonePrice, Integer, Hash)>] StandalonePrice data, response status code and response headers
    def by_project_key_standalone_prices_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_standalone_prices_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_standalone_prices_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_standalone_prices_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_standalone_prices_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/standalone-prices/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StandalonePrice'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_standalone_prices_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [StandalonePrice]
    def by_project_key_standalone_prices_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_standalone_prices_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StandalonePrice, Integer, Hash)>] StandalonePrice data, response status code and response headers
    def by_project_key_standalone_prices_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_standalone_prices_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_standalone_prices_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_standalone_prices_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/standalone-prices/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StandalonePrice'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_standalone_prices_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [StandalonePriceUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [StandalonePrice]
    def by_project_key_standalone_prices_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_standalone_prices_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [StandalonePriceUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StandalonePrice, Integer, Hash)>] StandalonePrice data, response status code and response headers
    def by_project_key_standalone_prices_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_standalone_prices_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_standalone_prices_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_standalone_prices_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/standalone-prices/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'StandalonePrice'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_standalone_prices_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [StandalonePricePagedQueryResponse]
    def by_project_key_standalone_prices_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_standalone_prices_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(StandalonePricePagedQueryResponse, Integer, Hash)>] StandalonePricePagedQueryResponse data, response status code and response headers
    def by_project_key_standalone_prices_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_standalone_prices_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_standalone_prices_get"
      end

      # resource path
      local_var_path = '/{projectKey}/standalone-prices'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StandalonePricePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_standalone_prices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Produces the [StandalonePriceDeletedMessage](ctp:api:type:StandalonePriceDeletedMessage).
    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [StandalonePrice]
    def by_project_key_standalone_prices_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_standalone_prices_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # Produces the [StandalonePriceDeletedMessage](ctp:api:type:StandalonePriceDeletedMessage).
    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StandalonePrice, Integer, Hash)>] StandalonePrice data, response status code and response headers
    def by_project_key_standalone_prices_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_standalone_prices_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_standalone_prices_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_standalone_prices_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_standalone_prices_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/standalone-prices/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StandalonePrice'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_standalone_prices_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [StandalonePrice]
    def by_project_key_standalone_prices_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_standalone_prices_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StandalonePrice, Integer, Hash)>] StandalonePrice data, response status code and response headers
    def by_project_key_standalone_prices_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_standalone_prices_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_standalone_prices_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_standalone_prices_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/standalone-prices/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StandalonePrice'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_standalone_prices_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [StandalonePriceUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [StandalonePrice]
    def by_project_key_standalone_prices_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_standalone_prices_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [StandalonePriceUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StandalonePrice, Integer, Hash)>] StandalonePrice data, response status code and response headers
    def by_project_key_standalone_prices_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_standalone_prices_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_standalone_prices_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_standalone_prices_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/standalone-prices/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'StandalonePrice'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_standalone_prices_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Produces the [StandalonePriceCreatedMessage](ctp:api:type:StandalonePriceCreatedMessage).
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [StandalonePriceDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [StandalonePrice]
    def by_project_key_standalone_prices_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_standalone_prices_post_with_http_info(project_key, opts)
      data
    end

    # Produces the [StandalonePriceCreatedMessage](ctp:api:type:StandalonePriceCreatedMessage).
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [StandalonePriceDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(StandalonePrice, Integer, Hash)>] StandalonePrice data, response status code and response headers
    def by_project_key_standalone_prices_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_standalone_prices_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_standalone_prices_post"
      end

      # resource path
      local_var_path = '/{projectKey}/standalone-prices'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'StandalonePrice'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_standalone_prices_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [State]
    def by_project_key_states_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_states_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def by_project_key_states_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_states_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_states_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_states_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_states_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/states/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'State'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_states_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [State]
    def by_project_key_states_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_states_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def by_project_key_states_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_states_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_states_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_states_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/states/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'State'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_states_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [StateUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [State]
    def by_project_key_states_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_states_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [StateUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def by_project_key_states_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_states_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_states_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_states_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/states/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'State'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_states_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [StatePagedQueryResponse]
    def by_project_key_states_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_states_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(StatePagedQueryResponse, Integer, Hash)>] StatePagedQueryResponse data, response status code and response headers
    def by_project_key_states_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_states_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_states_get"
      end

      # resource path
      local_var_path = '/{projectKey}/states'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StatePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_states_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [State]
    def by_project_key_states_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_states_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def by_project_key_states_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_states_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_states_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_states_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_states_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/states/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'State'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_states_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [State]
    def by_project_key_states_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_states_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def by_project_key_states_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_states_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_states_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_states_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/states/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'State'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_states_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [StateUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [State]
    def by_project_key_states_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_states_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [StateUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def by_project_key_states_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_states_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_states_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_states_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/states/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'State'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_states_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [StateDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [State]
    def by_project_key_states_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_states_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [StateDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def by_project_key_states_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_states_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_states_post"
      end

      # resource path
      local_var_path = '/{projectKey}/states'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'State'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_states_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Store]
    def by_project_key_stores_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_stores_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Store, Integer, Hash)>] Store data, response status code and response headers
    def by_project_key_stores_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_stores_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_stores_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_stores_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_stores_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/stores/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Store'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_stores_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Store]
    def by_project_key_stores_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_stores_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Store, Integer, Hash)>] Store data, response status code and response headers
    def by_project_key_stores_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_stores_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_stores_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_stores_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/stores/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Store'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_stores_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [StoreUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Store]
    def by_project_key_stores_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_stores_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [StoreUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Store, Integer, Hash)>] Store data, response status code and response headers
    def by_project_key_stores_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_stores_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_stores_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_stores_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/stores/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Store'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_stores_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [StorePagedQueryResponse]
    def by_project_key_stores_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_stores_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(StorePagedQueryResponse, Integer, Hash)>] StorePagedQueryResponse data, response status code and response headers
    def by_project_key_stores_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_stores_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_stores_get"
      end

      # resource path
      local_var_path = '/{projectKey}/stores'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'StorePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_stores_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Store]
    def by_project_key_stores_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_stores_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Store, Integer, Hash)>] Store data, response status code and response headers
    def by_project_key_stores_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_stores_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_stores_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_stores_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_stores_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/stores/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Store'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_stores_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Store]
    def by_project_key_stores_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_stores_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Store, Integer, Hash)>] Store data, response status code and response headers
    def by_project_key_stores_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_stores_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_stores_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_stores_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/stores/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Store'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_stores_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [StoreUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Store]
    def by_project_key_stores_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_stores_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [StoreUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Store, Integer, Hash)>] Store data, response status code and response headers
    def by_project_key_stores_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_stores_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_stores_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_stores_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/stores/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Store'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_stores_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [StoreDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Store]
    def by_project_key_stores_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_stores_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [StoreDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Store, Integer, Hash)>] Store data, response status code and response headers
    def by_project_key_stores_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_stores_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_stores_post"
      end

      # resource path
      local_var_path = '/{projectKey}/stores'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Store'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_stores_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Subscription]
    def by_project_key_subscriptions_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_subscriptions_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def by_project_key_subscriptions_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_subscriptions_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_subscriptions_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_subscriptions_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_subscriptions_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/subscriptions/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Subscription'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_subscriptions_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the representation of a subscription by its id.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Subscription]
    def by_project_key_subscriptions_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_subscriptions_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # Retrieves the representation of a subscription by its id.
    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def by_project_key_subscriptions_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_subscriptions_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_subscriptions_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_subscriptions_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/subscriptions/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Subscription'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_subscriptions_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Subscription]
    def by_project_key_subscriptions_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_subscriptions_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def by_project_key_subscriptions_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_subscriptions_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_subscriptions_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_subscriptions_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/subscriptions/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Subscription'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_subscriptions_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [SubscriptionPagedQueryResponse]
    def by_project_key_subscriptions_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_subscriptions_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(SubscriptionPagedQueryResponse, Integer, Hash)>] SubscriptionPagedQueryResponse data, response status code and response headers
    def by_project_key_subscriptions_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_subscriptions_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_subscriptions_get"
      end

      # resource path
      local_var_path = '/{projectKey}/subscriptions'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'SubscriptionPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_subscriptions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Subscription]
    def by_project_key_subscriptions_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_subscriptions_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def by_project_key_subscriptions_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_subscriptions_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_subscriptions_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_subscriptions_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_subscriptions_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/subscriptions/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Subscription'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_subscriptions_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the representation of a subscription by its key.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Subscription]
    def by_project_key_subscriptions_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_subscriptions_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # Retrieves the representation of a subscription by its key.
    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def by_project_key_subscriptions_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_subscriptions_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_subscriptions_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_subscriptions_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/subscriptions/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Subscription'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_subscriptions_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Subscription]
    def by_project_key_subscriptions_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_subscriptions_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def by_project_key_subscriptions_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_subscriptions_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_subscriptions_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_subscriptions_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/subscriptions/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Subscription'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_subscriptions_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The creation of a Subscription is eventually consistent, it may take up to a minute before it becomes fully active. In order to test that the destination is correctly configured, a test message will be put into the queue. If the message could not be delivered, the subscription will not be created. The payload of the test message is a notification of type ResourceCreated for the resourceTypeId subscription. Currently, a maximum of 25 subscriptions can be created per project.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Subscription]
    def by_project_key_subscriptions_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_subscriptions_post_with_http_info(project_key, opts)
      data
    end

    # The creation of a Subscription is eventually consistent, it may take up to a minute before it becomes fully active. In order to test that the destination is correctly configured, a test message will be put into the queue. If the message could not be delivered, the subscription will not be created. The payload of the test message is a notification of type ResourceCreated for the resourceTypeId subscription. Currently, a maximum of 25 subscriptions can be created per project.
    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def by_project_key_subscriptions_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_subscriptions_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_subscriptions_post"
      end

      # resource path
      local_var_path = '/{projectKey}/subscriptions'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Subscription'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_subscriptions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [TaxCategory]
    def by_project_key_tax_categories_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_tax_categories_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(TaxCategory, Integer, Hash)>] TaxCategory data, response status code and response headers
    def by_project_key_tax_categories_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_tax_categories_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_tax_categories_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_tax_categories_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_tax_categories_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/tax-categories/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'TaxCategory'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_tax_categories_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [TaxCategory]
    def by_project_key_tax_categories_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_tax_categories_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(TaxCategory, Integer, Hash)>] TaxCategory data, response status code and response headers
    def by_project_key_tax_categories_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_tax_categories_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_tax_categories_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_tax_categories_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/tax-categories/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'TaxCategory'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_tax_categories_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [TaxCategoryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [TaxCategory]
    def by_project_key_tax_categories_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_tax_categories_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [TaxCategoryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(TaxCategory, Integer, Hash)>] TaxCategory data, response status code and response headers
    def by_project_key_tax_categories_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_tax_categories_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_tax_categories_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_tax_categories_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/tax-categories/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'TaxCategory'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_tax_categories_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [TaxCategoryPagedQueryResponse]
    def by_project_key_tax_categories_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_tax_categories_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(TaxCategoryPagedQueryResponse, Integer, Hash)>] TaxCategoryPagedQueryResponse data, response status code and response headers
    def by_project_key_tax_categories_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_tax_categories_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_tax_categories_get"
      end

      # resource path
      local_var_path = '/{projectKey}/tax-categories'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'TaxCategoryPagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_tax_categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [TaxCategory]
    def by_project_key_tax_categories_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_tax_categories_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(TaxCategory, Integer, Hash)>] TaxCategory data, response status code and response headers
    def by_project_key_tax_categories_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_tax_categories_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_tax_categories_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_tax_categories_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_tax_categories_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/tax-categories/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'TaxCategory'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_tax_categories_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [TaxCategory]
    def by_project_key_tax_categories_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_tax_categories_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(TaxCategory, Integer, Hash)>] TaxCategory data, response status code and response headers
    def by_project_key_tax_categories_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_tax_categories_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_tax_categories_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_tax_categories_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/tax-categories/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'TaxCategory'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_tax_categories_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [TaxCategoryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [TaxCategory]
    def by_project_key_tax_categories_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_tax_categories_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [TaxCategoryUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(TaxCategory, Integer, Hash)>] TaxCategory data, response status code and response headers
    def by_project_key_tax_categories_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_tax_categories_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_tax_categories_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_tax_categories_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/tax-categories/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'TaxCategory'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_tax_categories_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [TaxCategoryDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [TaxCategory]
    def by_project_key_tax_categories_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_tax_categories_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [TaxCategoryDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(TaxCategory, Integer, Hash)>] TaxCategory data, response status code and response headers
    def by_project_key_tax_categories_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_tax_categories_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_tax_categories_post"
      end

      # resource path
      local_var_path = '/{projectKey}/tax-categories'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'TaxCategory'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_tax_categories_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Type]
    def by_project_key_types_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_types_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Type, Integer, Hash)>] Type data, response status code and response headers
    def by_project_key_types_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_types_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_types_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_types_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_types_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/types/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Type'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_types_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Type]
    def by_project_key_types_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_types_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Type, Integer, Hash)>] Type data, response status code and response headers
    def by_project_key_types_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_types_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_types_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_types_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/types/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Type'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_types_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [TypeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Type]
    def by_project_key_types_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_types_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [TypeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Type, Integer, Hash)>] Type data, response status code and response headers
    def by_project_key_types_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_types_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_types_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_types_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/types/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Type'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_types_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [TypePagedQueryResponse]
    def by_project_key_types_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_types_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(TypePagedQueryResponse, Integer, Hash)>] TypePagedQueryResponse data, response status code and response headers
    def by_project_key_types_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_types_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_types_get"
      end

      # resource path
      local_var_path = '/{projectKey}/types'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'TypePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Type]
    def by_project_key_types_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_types_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Type, Integer, Hash)>] Type data, response status code and response headers
    def by_project_key_types_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_types_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_types_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_types_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_types_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/types/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Type'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_types_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Type]
    def by_project_key_types_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_types_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Type, Integer, Hash)>] Type data, response status code and response headers
    def by_project_key_types_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_types_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_types_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_types_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/types/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Type'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_types_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [TypeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Type]
    def by_project_key_types_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_types_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [TypeUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Type, Integer, Hash)>] Type data, response status code and response headers
    def by_project_key_types_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_types_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_types_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_types_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/types/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Type'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_types_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [TypeDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Type]
    def by_project_key_types_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_types_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [TypeDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Type, Integer, Hash)>] Type data, response status code and response headers
    def by_project_key_types_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_types_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_types_post"
      end

      # resource path
      local_var_path = '/{projectKey}/types'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Type'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_types_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Zone]
    def by_project_key_zones_by_id_delete(project_key, id, version, opts = {})
      data, _status_code, _headers = by_project_key_zones_by_id_delete_with_http_info(project_key, id, version, opts)
      data
    end

    # @param project_key
    # @param id
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def by_project_key_zones_by_id_delete_with_http_info(project_key, id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_zones_by_id_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_zones_by_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_zones_by_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_zones_by_id_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/zones/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Zone'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_zones_by_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Zone]
    def by_project_key_zones_by_id_get(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_zones_by_id_get_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def by_project_key_zones_by_id_get_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_zones_by_id_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_zones_by_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_zones_by_id_get"
      end

      # resource path
      local_var_path = '/{projectKey}/zones/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Zone'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_zones_by_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ZoneUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Zone]
    def by_project_key_zones_by_id_post(project_key, id, opts = {})
      data, _status_code, _headers = by_project_key_zones_by_id_post_with_http_info(project_key, id, opts)
      data
    end

    # @param project_key
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [ZoneUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def by_project_key_zones_by_id_post_with_http_info(project_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_zones_by_id_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_zones_by_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.by_project_key_zones_by_id_post"
      end

      # resource path
      local_var_path = '/{projectKey}/zones/{ID}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Zone'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_zones_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [ZonePagedQueryResponse]
    def by_project_key_zones_get(project_key, opts = {})
      data, _status_code, _headers = by_project_key_zones_get_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @option opts [Array<Sort>] :sort
    # @option opts [Float] :limit
    # @option opts [Float] :offset
    # @option opts [BOOLEAN] :with_total
    # @option opts [Array<QueryPredicate>] :where
    # @option opts [Array<String>] :var___a_z_a_z0_9
    # @return [Array<(ZonePagedQueryResponse, Integer, Hash)>] ZonePagedQueryResponse data, response status code and response headers
    def by_project_key_zones_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_zones_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_zones_get"
      end

      # resource path
      local_var_path = '/{projectKey}/zones'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?
      query_params[:sort] = @api_client.build_collection_param(opts[:sort], :multi) if !opts[:sort].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:offset] = opts[:offset] if !opts[:offset].nil?
      query_params[:withTotal] = opts[:with_total] if !opts[:with_total].nil?
      query_params[:where] = @api_client.build_collection_param(opts[:where], :multi) if !opts[:where].nil?
      query_params[:'/^var[.][a-zA-Z0-9]+$/'] = @api_client.build_collection_param(opts[:var___a_z_a_z0_9], :multi) if !opts[:var___a_z_a_z0_9].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'ZonePagedQueryResponse'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_zones_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Zone]
    def by_project_key_zones_key_by_key_delete(project_key, key, version, opts = {})
      data, _status_code, _headers = by_project_key_zones_key_by_key_delete_with_http_info(project_key, key, version, opts)
      data
    end

    # @param project_key
    # @param key
    # @param version
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def by_project_key_zones_key_by_key_delete_with_http_info(project_key, key, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_zones_key_by_key_delete ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_zones_key_by_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_zones_key_by_key_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.by_project_key_zones_key_by_key_delete"
      end

      # resource path
      local_var_path = '/{projectKey}/zones/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:version] = version
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Zone'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_zones_key_by_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Zone]
    def by_project_key_zones_key_by_key_get(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_zones_key_by_key_get_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def by_project_key_zones_key_by_key_get_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_zones_key_by_key_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_zones_key_by_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_zones_key_by_key_get"
      end

      # resource path
      local_var_path = '/{projectKey}/zones/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Zone'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_zones_key_by_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ZoneUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Zone]
    def by_project_key_zones_key_by_key_post(project_key, key, opts = {})
      data, _status_code, _headers = by_project_key_zones_key_by_key_post_with_http_info(project_key, key, opts)
      data
    end

    # @param project_key
    # @param key
    # @param [Hash] opts the optional parameters
    # @option opts [ZoneUpdate] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def by_project_key_zones_key_by_key_post_with_http_info(project_key, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_zones_key_by_key_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_zones_key_by_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.by_project_key_zones_key_by_key_post"
      end

      # resource path
      local_var_path = '/{projectKey}/zones/key={key}'.sub('{' + 'projectKey' + '}', project_key.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Zone'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_zones_key_by_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ZoneDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Zone]
    def by_project_key_zones_post(project_key, opts = {})
      data, _status_code, _headers = by_project_key_zones_post_with_http_info(project_key, opts)
      data
    end

    # @param project_key
    # @param [Hash] opts the optional parameters
    # @option opts [ZoneDraft] :body
    # @option opts [Array<Expansion>] :expand
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def by_project_key_zones_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.by_project_key_zones_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling DefaultApi.by_project_key_zones_post"
      end

      # resource path
      local_var_path = '/{projectKey}/zones'.sub('{' + 'projectKey' + '}', project_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = @api_client.build_collection_param(opts[:expand], :multi) if !opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'Zone'

      auth_names = opts[:auth_names] || ['oauth_2_0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names,
                                                        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#by_project_key_zones_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
