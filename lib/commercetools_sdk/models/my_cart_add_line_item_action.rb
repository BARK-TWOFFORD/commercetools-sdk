# #commercetools Composable Commerce
#
# No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
#
# OpenAPI spec version: v1
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.34

require 'date'

module CommercetoolsSdk
  class MyCartAddLineItemAction
    attr_accessor :action

    attr_accessor :custom

    attr_accessor :distribution_channel

    attr_accessor :external_tax_rate

    attr_accessor :product_id

    attr_accessor :variant_id

    attr_accessor :sku

    attr_accessor :quantity

    attr_accessor :supply_channel

    attr_accessor :external_price

    attr_accessor :external_total_price

    attr_accessor :shipping_details

    attr_accessor :added_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'action': :action,
        'custom': :custom,
        'distribution_channel': :distributionChannel,
        'external_tax_rate': :externalTaxRate,
        'product_id': :productId,
        'variant_id': :variantId,
        'sku': :sku,
        'quantity': :quantity,
        'supply_channel': :supplyChannel,
        'external_price': :externalPrice,
        'external_total_price': :externalTotalPrice,
        'shipping_details': :shippingDetails,
        'added_at': :addedAt
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'action': :'Object',
        'custom': :'Object',
        'distribution_channel': :'Object',
        'external_tax_rate': :'Object',
        'product_id': :'Object',
        'variant_id': :'Object',
        'sku': :'Object',
        'quantity': :'Object',
        'supply_channel': :'Object',
        'external_price': :'Object',
        'external_total_price': :'Object',
        'shipping_details': :'Object',
        'added_at': :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `CommercetoolsSdk::MyCartAddLineItemAction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `CommercetoolsSdk::MyCartAddLineItemAction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:action)
        self.action = attributes[:action]
      end

      if attributes.key?(:custom)
        self.custom = attributes[:custom]
      end

      if attributes.key?(:distribution_channel)
        self.distribution_channel = attributes[:distribution_channel]
      end

      if attributes.key?(:external_tax_rate)
        self.external_tax_rate = attributes[:external_tax_rate]
      end

      if attributes.key?(:product_id)
        self.product_id = attributes[:product_id]
      end

      if attributes.key?(:variant_id)
        self.variant_id = attributes[:variant_id]
      end

      if attributes.key?(:sku)
        self.sku = attributes[:sku]
      end

      if attributes.key?(:quantity)
        self.quantity = attributes[:quantity]
      end

      if attributes.key?(:supply_channel)
        self.supply_channel = attributes[:supply_channel]
      end

      if attributes.key?(:external_price)
        self.external_price = attributes[:external_price]
      end

      if attributes.key?(:external_total_price)
        self.external_total_price = attributes[:external_total_price]
      end

      if attributes.key?(:shipping_details)
        self.shipping_details = attributes[:shipping_details]
      end

      if attributes.key?(:added_at)
        self.added_at = attributes[:added_at]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)

      self.class == o.class &&
        action == o.action &&
        custom == o.custom &&
        distribution_channel == o.distribution_channel &&
        external_tax_rate == o.external_tax_rate &&
        product_id == o.product_id &&
        variant_id == o.variant_id &&
        sku == o.sku &&
        quantity == o.quantity &&
        supply_channel == o.supply_channel &&
        external_price == o.external_price &&
        external_total_price == o.external_total_price &&
        shipping_details == o.shipping_details &&
        added_at == o.added_at && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [action, custom, distribution_channel, external_tax_rate, product_id, variant_id, sku, quantity, supply_channel, external_price, external_total_price, shipping_details, added_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        CommercetoolsSdk.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end end
end
