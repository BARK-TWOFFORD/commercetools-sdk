# #commercetools Composable Commerce
#
# No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
#
# OpenAPI spec version: v1
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.34

require 'date'

module CommercetoolsSdk
  class OrderImportDraft
    attr_accessor :order_number

    attr_accessor :customer_id

    attr_accessor :customer_email

    attr_accessor :line_items

    attr_accessor :custom_line_items

    attr_accessor :total_price

    attr_accessor :taxed_price

    attr_accessor :shipping_address

    attr_accessor :billing_address

    attr_accessor :customer_group

    attr_accessor :country

    attr_accessor :order_state

    attr_accessor :state

    attr_accessor :shipment_state

    attr_accessor :payment_state

    attr_accessor :shipping_info

    attr_accessor :payment_info

    attr_accessor :completed_at

    attr_accessor :custom

    attr_accessor :inventory_mode

    attr_accessor :tax_rounding_mode

    attr_accessor :item_shipping_addresses

    attr_accessor :store

    attr_accessor :origin

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'order_number': :orderNumber,
        'customer_id': :customerId,
        'customer_email': :customerEmail,
        'line_items': :lineItems,
        'custom_line_items': :customLineItems,
        'total_price': :totalPrice,
        'taxed_price': :taxedPrice,
        'shipping_address': :shippingAddress,
        'billing_address': :billingAddress,
        'customer_group': :customerGroup,
        'country': :country,
        'order_state': :orderState,
        'state': :state,
        'shipment_state': :shipmentState,
        'payment_state': :paymentState,
        'shipping_info': :shippingInfo,
        'payment_info': :paymentInfo,
        'completed_at': :completedAt,
        'custom': :custom,
        'inventory_mode': :inventoryMode,
        'tax_rounding_mode': :taxRoundingMode,
        'item_shipping_addresses': :itemShippingAddresses,
        'store': :store,
        'origin': :origin
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'order_number': :Object,
        'customer_id': :Object,
        'customer_email': :Object,
        'line_items': :Object,
        'custom_line_items': :Object,
        'total_price': :Object,
        'taxed_price': :Object,
        'shipping_address': :Object,
        'billing_address': :Object,
        'customer_group': :Object,
        'country': :Object,
        'order_state': :Object,
        'state': :Object,
        'shipment_state': :Object,
        'payment_state': :Object,
        'shipping_info': :Object,
        'payment_info': :Object,
        'completed_at': :Object,
        'custom': :Object,
        'inventory_mode': :Object,
        'tax_rounding_mode': :Object,
        'item_shipping_addresses': :Object,
        'store': :Object,
        'origin': :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `CommercetoolsSdk::OrderImportDraft` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `CommercetoolsSdk::OrderImportDraft`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:order_number)
        self.order_number = attributes[:order_number]
      end

      if attributes.key?(:customer_id)
        self.customer_id = attributes[:customer_id]
      end

      if attributes.key?(:customer_email)
        self.customer_email = attributes[:customer_email]
      end

      if attributes.key?(:line_items)
        if (value = attributes[:line_items]).is_a?(Array)
          self.line_items = value
        end
      end

      if attributes.key?(:custom_line_items)
        if (value = attributes[:custom_line_items]).is_a?(Array)
          self.custom_line_items = value
        end
      end

      if attributes.key?(:total_price)
        self.total_price = attributes[:total_price]
      end

      if attributes.key?(:taxed_price)
        self.taxed_price = attributes[:taxed_price]
      end

      if attributes.key?(:shipping_address)
        self.shipping_address = attributes[:shipping_address]
      end

      if attributes.key?(:billing_address)
        self.billing_address = attributes[:billing_address]
      end

      if attributes.key?(:customer_group)
        self.customer_group = attributes[:customer_group]
      end

      if attributes.key?(:country)
        self.country = attributes[:country]
      end

      if attributes.key?(:order_state)
        self.order_state = attributes[:order_state]
      end

      if attributes.key?(:state)
        self.state = attributes[:state]
      end

      if attributes.key?(:shipment_state)
        self.shipment_state = attributes[:shipment_state]
      end

      if attributes.key?(:payment_state)
        self.payment_state = attributes[:payment_state]
      end

      if attributes.key?(:shipping_info)
        self.shipping_info = attributes[:shipping_info]
      end

      if attributes.key?(:payment_info)
        self.payment_info = attributes[:payment_info]
      end

      if attributes.key?(:completed_at)
        self.completed_at = attributes[:completed_at]
      end

      if attributes.key?(:custom)
        self.custom = attributes[:custom]
      end

      if attributes.key?(:inventory_mode)
        self.inventory_mode = attributes[:inventory_mode]
      end

      if attributes.key?(:tax_rounding_mode)
        self.tax_rounding_mode = attributes[:tax_rounding_mode]
      end

      if attributes.key?(:item_shipping_addresses)
        if (value = attributes[:item_shipping_addresses]).is_a?(Array)
          self.item_shipping_addresses = value
        end
      end

      if attributes.key?(:store)
        self.store = attributes[:store]
      end

      if attributes.key?(:origin)
        self.origin = attributes[:origin]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)

      self.class == o.class &&
        order_number == o.order_number &&
        customer_id == o.customer_id &&
        customer_email == o.customer_email &&
        line_items == o.line_items &&
        custom_line_items == o.custom_line_items &&
        total_price == o.total_price &&
        taxed_price == o.taxed_price &&
        shipping_address == o.shipping_address &&
        billing_address == o.billing_address &&
        customer_group == o.customer_group &&
        country == o.country &&
        order_state == o.order_state &&
        state == o.state &&
        shipment_state == o.shipment_state &&
        payment_state == o.payment_state &&
        shipping_info == o.shipping_info &&
        payment_info == o.payment_info &&
        completed_at == o.completed_at &&
        custom == o.custom &&
        inventory_mode == o.inventory_mode &&
        tax_rounding_mode == o.tax_rounding_mode &&
        item_shipping_addresses == o.item_shipping_addresses &&
        store == o.store &&
        origin == o.origin
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [order_number, customer_id, customer_email, line_items, custom_line_items, total_price, taxed_price, shipping_address, billing_address, customer_group, country, order_state, state, shipment_state, payment_state, shipping_info, payment_info, completed_at, custom, inventory_mode, tax_rounding_mode, item_shipping_addresses, store, origin].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        CommercetoolsSdk.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end end
end
