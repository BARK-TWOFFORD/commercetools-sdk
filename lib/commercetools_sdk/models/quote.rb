=begin
#commercetools Composable Commerce

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.34
=end

require 'date'

module CommercetoolsSdk
  class Quote
    attr_accessor :id

    attr_accessor :version

    attr_accessor :created_at

    attr_accessor :last_modified_at

    attr_accessor :key

    attr_accessor :last_modified_by

    attr_accessor :created_by

    attr_accessor :quote_request

    attr_accessor :staged_quote

    attr_accessor :customer

    attr_accessor :customer_group

    attr_accessor :valid_to

    attr_accessor :seller_comment

    attr_accessor :store

    attr_accessor :line_items

    attr_accessor :custom_line_items

    attr_accessor :total_price

    attr_accessor :taxed_price

    attr_accessor :shipping_address

    attr_accessor :billing_address

    attr_accessor :inventory_mode

    attr_accessor :tax_mode

    attr_accessor :tax_rounding_mode

    attr_accessor :tax_calculation_mode

    attr_accessor :country

    attr_accessor :shipping_info

    attr_accessor :payment_info

    attr_accessor :shipping_rate_input

    attr_accessor :item_shipping_addresses

    attr_accessor :direct_discounts

    attr_accessor :custom

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'created_at' => :'createdAt',
        :'last_modified_at' => :'lastModifiedAt',
        :'key' => :'key',
        :'last_modified_by' => :'lastModifiedBy',
        :'created_by' => :'createdBy',
        :'quote_request' => :'quoteRequest',
        :'staged_quote' => :'stagedQuote',
        :'customer' => :'customer',
        :'customer_group' => :'customerGroup',
        :'valid_to' => :'validTo',
        :'seller_comment' => :'sellerComment',
        :'store' => :'store',
        :'line_items' => :'lineItems',
        :'custom_line_items' => :'customLineItems',
        :'total_price' => :'totalPrice',
        :'taxed_price' => :'taxedPrice',
        :'shipping_address' => :'shippingAddress',
        :'billing_address' => :'billingAddress',
        :'inventory_mode' => :'inventoryMode',
        :'tax_mode' => :'taxMode',
        :'tax_rounding_mode' => :'taxRoundingMode',
        :'tax_calculation_mode' => :'taxCalculationMode',
        :'country' => :'country',
        :'shipping_info' => :'shippingInfo',
        :'payment_info' => :'paymentInfo',
        :'shipping_rate_input' => :'shippingRateInput',
        :'item_shipping_addresses' => :'itemShippingAddresses',
        :'direct_discounts' => :'directDiscounts',
        :'custom' => :'custom'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'',
        :'version' => :'',
        :'created_at' => :'',
        :'last_modified_at' => :'',
        :'key' => :'',
        :'last_modified_by' => :'',
        :'created_by' => :'',
        :'quote_request' => :'',
        :'staged_quote' => :'',
        :'customer' => :'',
        :'customer_group' => :'',
        :'valid_to' => :'',
        :'seller_comment' => :'',
        :'store' => :'',
        :'line_items' => :'',
        :'custom_line_items' => :'',
        :'total_price' => :'',
        :'taxed_price' => :'',
        :'shipping_address' => :'',
        :'billing_address' => :'',
        :'inventory_mode' => :'',
        :'tax_mode' => :'',
        :'tax_rounding_mode' => :'',
        :'tax_calculation_mode' => :'',
        :'country' => :'',
        :'shipping_info' => :'',
        :'payment_info' => :'',
        :'shipping_rate_input' => :'',
        :'item_shipping_addresses' => :'',
        :'direct_discounts' => :'',
        :'custom' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CommercetoolsSdk::Quote` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CommercetoolsSdk::Quote`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      
      

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'last_modified_at')
        self.last_modified_at = attributes[:'last_modified_at']
      end

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.key?(:'last_modified_by')
        self.last_modified_by = attributes[:'last_modified_by']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'quote_request')
        self.quote_request = attributes[:'quote_request']
      end

      if attributes.key?(:'staged_quote')
        self.staged_quote = attributes[:'staged_quote']
      end

      if attributes.key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.key?(:'customer_group')
        self.customer_group = attributes[:'customer_group']
      end

      if attributes.key?(:'valid_to')
        self.valid_to = attributes[:'valid_to']
      end

      if attributes.key?(:'seller_comment')
        self.seller_comment = attributes[:'seller_comment']
      end

      if attributes.key?(:'store')
        self.store = attributes[:'store']
      end

      if attributes.key?(:'line_items')
        if (value = attributes[:'line_items']).is_a?(Array)
          self.line_items = value
        end
      end

      if attributes.key?(:'custom_line_items')
        if (value = attributes[:'custom_line_items']).is_a?(Array)
          self.custom_line_items = value
        end
      end

      if attributes.key?(:'total_price')
        self.total_price = attributes[:'total_price']
      end

      if attributes.key?(:'taxed_price')
        self.taxed_price = attributes[:'taxed_price']
      end

      if attributes.key?(:'shipping_address')
        self.shipping_address = attributes[:'shipping_address']
      end

      if attributes.key?(:'billing_address')
        self.billing_address = attributes[:'billing_address']
      end

      if attributes.key?(:'inventory_mode')
        self.inventory_mode = attributes[:'inventory_mode']
      end

      if attributes.key?(:'tax_mode')
        self.tax_mode = attributes[:'tax_mode']
      end

      if attributes.key?(:'tax_rounding_mode')
        self.tax_rounding_mode = attributes[:'tax_rounding_mode']
      end

      if attributes.key?(:'tax_calculation_mode')
        self.tax_calculation_mode = attributes[:'tax_calculation_mode']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'shipping_info')
        self.shipping_info = attributes[:'shipping_info']
      end

      if attributes.key?(:'payment_info')
        self.payment_info = attributes[:'payment_info']
      end

      if attributes.key?(:'shipping_rate_input')
        self.shipping_rate_input = attributes[:'shipping_rate_input']
      end

      if attributes.key?(:'item_shipping_addresses')
        if (value = attributes[:'item_shipping_addresses']).is_a?(Array)
          self.item_shipping_addresses = value
        end
      end

      if attributes.key?(:'direct_discounts')
        if (value = attributes[:'direct_discounts']).is_a?(Array)
          self.direct_discounts = value
        end
      end

      if attributes.key?(:'custom')
        self.custom = attributes[:'custom']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          created_at == o.created_at &&
          last_modified_at == o.last_modified_at &&
          key == o.key &&
          last_modified_by == o.last_modified_by &&
          created_by == o.created_by &&
          quote_request == o.quote_request &&
          staged_quote == o.staged_quote &&
          customer == o.customer &&
          customer_group == o.customer_group &&
          valid_to == o.valid_to &&
          seller_comment == o.seller_comment &&
          store == o.store &&
          line_items == o.line_items &&
          custom_line_items == o.custom_line_items &&
          total_price == o.total_price &&
          taxed_price == o.taxed_price &&
          shipping_address == o.shipping_address &&
          billing_address == o.billing_address &&
          inventory_mode == o.inventory_mode &&
          tax_mode == o.tax_mode &&
          tax_rounding_mode == o.tax_rounding_mode &&
          tax_calculation_mode == o.tax_calculation_mode &&
          country == o.country &&
          shipping_info == o.shipping_info &&
          payment_info == o.payment_info &&
          shipping_rate_input == o.shipping_rate_input &&
          item_shipping_addresses == o.item_shipping_addresses &&
          direct_discounts == o.direct_discounts &&
          custom == o.custom && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, version, created_at, last_modified_at, key, last_modified_by, created_by, quote_request, staged_quote, customer, customer_group, valid_to, seller_comment, store, line_items, custom_line_items, total_price, taxed_price, shipping_address, billing_address, inventory_mode, tax_mode, tax_rounding_mode, tax_calculation_mode, country, shipping_info, payment_info, shipping_rate_input, item_shipping_addresses, direct_discounts, custom].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        CommercetoolsSdk.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
