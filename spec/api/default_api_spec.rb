# #commercetools Composable Commerce
#
# No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
#
# OpenAPI spec version: v1
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.34

require 'spec_helper'
require 'json'

# Unit tests for CommercetoolsSdk::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = CommercetoolsSdk::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@instance).to be_instance_of(CommercetoolsSdk::DefaultApi)
    end
  end

  # unit tests for by_project_key_api_clients_by_id_delete
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [ApiClient]
  describe 'by_project_key_api_clients_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_api_clients_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [ApiClient]
  describe 'by_project_key_api_clients_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_api_clients_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ApiClientPagedQueryResponse]
  describe 'by_project_key_api_clients_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_api_clients_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ApiClientDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ApiClient]
  describe 'by_project_key_api_clients_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_cart_discounts_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CartDiscount]
  describe 'by_project_key_cart_discounts_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_cart_discounts_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CartDiscount]
  describe 'by_project_key_cart_discounts_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_cart_discounts_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [CartDiscountUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CartDiscount]
  describe 'by_project_key_cart_discounts_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_cart_discounts_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CartDiscountPagedQueryResponse]
  describe 'by_project_key_cart_discounts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_cart_discounts_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CartDiscount]
  describe 'by_project_key_cart_discounts_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_cart_discounts_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CartDiscount]
  describe 'by_project_key_cart_discounts_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_cart_discounts_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [CartDiscountUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CartDiscount]
  describe 'by_project_key_cart_discounts_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_cart_discounts_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CartDiscountDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CartDiscount]
  describe 'by_project_key_cart_discounts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_carts_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_by_id_get
  # The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_carts_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [CartUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_carts_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_customer_id_by_customer_id_get
  # Retrieves the active cart of the customer that has been modified most recently. It does not consider carts with CartOrigin Merchant. If no active cart exists, a 404 Not Found error is returned.  The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
  # @param project_key
  # @param customer_id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_carts_customer_id_by_customer_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CartPagedQueryResponse]
  describe 'by_project_key_carts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_carts_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_key_by_key_get
  # The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_carts_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [CartUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_carts_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_post
  # Creating a cart can fail with an InvalidOperation if the referenced shipping method in the CartDraft has a predicate which does not match the cart.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CartDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_carts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_carts_replicate_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ReplicaCartDraft] :body
  # @return [Cart]
  describe 'by_project_key_carts_replicate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_categories_by_id_delete
  # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Category]
  describe 'by_project_key_categories_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_categories_by_id_get
  # Either the [scope](/../api/scopes) &#x60;view_products:{projectKey}&#x60; or &#x60;view_categories:{projectKey}&#x60; is required.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Category]
  describe 'by_project_key_categories_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_categories_by_id_post
  # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [CategoryUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Category]
  describe 'by_project_key_categories_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_categories_get
  # Either the [scope](/../api/scopes) &#x60;view_products:{projectKey}&#x60; or &#x60;view_categories:{projectKey}&#x60; is required.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CategoryPagedQueryResponse]
  describe 'by_project_key_categories_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_categories_key_by_key_delete
  # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Category]
  describe 'by_project_key_categories_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_categories_key_by_key_get
  # Either the [scope](/../api/scopes) &#x60;view_products:{projectKey}&#x60; or &#x60;view_categories:{projectKey}&#x60; is required.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Category]
  describe 'by_project_key_categories_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_categories_key_by_key_post
  # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [CategoryUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Category]
  describe 'by_project_key_categories_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_categories_post
  # Either the [scope](/../api/scopes) &#x60;manage_products:{projectKey}&#x60; or &#x60;manage_categories:{projectKey}&#x60; is required.  Creating a Category produces the [CategoryCreatedMessage](/../api/message-types#categorycreatedmessage).
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CategoryDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Category]
  describe 'by_project_key_categories_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_channels_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Channel]
  describe 'by_project_key_channels_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_channels_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Channel]
  describe 'by_project_key_channels_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_channels_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ChannelUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Channel]
  describe 'by_project_key_channels_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_channels_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ChannelPagedQueryResponse]
  describe 'by_project_key_channels_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_channels_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ChannelDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Channel]
  describe 'by_project_key_channels_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_custom_objects_by_container_by_key_delete
  # @param project_key
  # @param container
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :version
  # @option opts [Array<Expansion>] :expand
  # @option opts [BOOLEAN] :data_erasure
  # @return [CustomObject]
  describe 'by_project_key_custom_objects_by_container_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_custom_objects_by_container_by_key_get
  # @param project_key
  # @param container
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CustomObject]
  describe 'by_project_key_custom_objects_by_container_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_custom_objects_by_container_get
  # @param project_key
  # @param container
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Sort>] :sort
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @return [CustomObjectPagedQueryResponse]
  describe 'by_project_key_custom_objects_by_container_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_custom_objects_get
  # For performance reasons, it is highly advisable to query for Custom Objects in a container by using the &#x60;container&#x60; field in the &#x60;where&#x60; predicate.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CustomObjectPagedQueryResponse]
  describe 'by_project_key_custom_objects_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_custom_objects_post
  # If an object with the given container/key exists, the object will be replaced with the new value and the version is incremented. If the request contains a version and an object with the given container/key, then the version must match the version of the existing object. Concurrent updates for the same Custom Object can result in a [409 Conflict](/../api/errors#409-conflict) even if the version is not provided.  Fields with &#x60;null&#x60; values will **not be saved**.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomObjectDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CustomObject]
  describe 'by_project_key_custom_objects_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customer_groups_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerGroup]
  describe 'by_project_key_customer_groups_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customer_groups_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerGroup]
  describe 'by_project_key_customer_groups_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customer_groups_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerGroupUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerGroup]
  describe 'by_project_key_customer_groups_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customer_groups_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CustomerGroupPagedQueryResponse]
  describe 'by_project_key_customer_groups_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customer_groups_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerGroup]
  describe 'by_project_key_customer_groups_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customer_groups_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerGroup]
  describe 'by_project_key_customer_groups_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customer_groups_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerGroupUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerGroup]
  describe 'by_project_key_customer_groups_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customer_groups_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerGroupDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerGroup]
  describe 'by_project_key_customer_groups_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_customers_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_customers_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_customers_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_email_confirm_post
  # Verifies customer&#x27;s email using a token.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerEmailVerify] :body
  # @return [Customer]
  describe 'by_project_key_customers_email_confirm_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_email_token_by_email_token_get
  # @param project_key
  # @param email_token
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_customers_email_token_by_email_token_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_email_token_post
  # Create a Token for verifying the Customer&#x27;s Email
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerCreateEmailToken] :body
  # @return [CustomerToken]
  describe 'by_project_key_customers_email_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CustomerPagedQueryResponse]
  describe 'by_project_key_customers_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_customers_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_customers_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_customers_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_password_post
  # Change a customers password
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerChangePassword] :body
  # @return [Customer]
  describe 'by_project_key_customers_password_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_password_reset_post
  # Set a new password using a token.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerResetPassword] :body
  # @return [Customer]
  describe 'by_project_key_customers_password_reset_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_password_token_by_password_token_get
  # @param project_key
  # @param password_token
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_customers_password_token_by_password_token_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_password_token_post
  # The token value is used to reset the password of the customer with the given email. The token is valid only for 10 minutes.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerCreatePasswordResetToken] :body
  # @return [CustomerToken]
  describe 'by_project_key_customers_password_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_customers_post
  # Creates a customer. If an anonymous cart is passed in, then the cart is assigned to the created customer and the version number of the Cart will increase. If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerSignInResult]
  describe 'by_project_key_customers_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_discount_codes_by_id_delete
  # Deprecated scope: &#x60;manage_orders:{projectKey}&#x60;
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [DiscountCode]
  describe 'by_project_key_discount_codes_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_discount_codes_by_id_get
  # Deprecated scope: &#x60;view_orders:{projectKey}&#x60;
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [DiscountCode]
  describe 'by_project_key_discount_codes_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_discount_codes_by_id_post
  # Deprecated scope: &#x60;manage_orders:{projectKey}&#x60;
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [DiscountCodeUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [DiscountCode]
  describe 'by_project_key_discount_codes_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_discount_codes_get
  # Deprecated scope: &#x60;view_orders:{projectKey}&#x60;
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [DiscountCodePagedQueryResponse]
  describe 'by_project_key_discount_codes_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_discount_codes_post
  # Deprecated scope: &#x60;manage_orders:{projectKey}&#x60;
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [DiscountCodeDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [DiscountCode]
  describe 'by_project_key_discount_codes_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_extensions_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Extension]
  describe 'by_project_key_extensions_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_extensions_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Extension]
  describe 'by_project_key_extensions_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_extensions_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ExtensionUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Extension]
  describe 'by_project_key_extensions_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_extensions_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ExtensionPagedQueryResponse]
  describe 'by_project_key_extensions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_extensions_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Extension]
  describe 'by_project_key_extensions_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_extensions_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Extension]
  describe 'by_project_key_extensions_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_extensions_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ExtensionUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Extension]
  describe 'by_project_key_extensions_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_extensions_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ExtensionDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Extension]
  describe 'by_project_key_extensions_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @return [Project]
  describe 'by_project_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_graphql_post
  # Execute a GraphQL query
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [GraphQLRequest] :body
  # @return [GraphQLResponse]
  describe 'by_project_key_graphql_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_by_id_delete
  # @param project_key
  # @param store_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_by_id_get
  # Returns a cart by its ID from a specific Store. If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_by_id_post
  # Updates a [Cart](ctp:api:type:Cart) in the Store specified by &#x60;storeKey&#x60;. If the Cart exists in the Project but does not have the store field, or the &#x60;store&#x60; field references a different Store, this method returns a [ResourceNotFoundError](ctp:api:type:ResourceNotFoundError).
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [CartUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get
  # Retrieves the active cart of the customer that has been modified most recently in a specific Store.  If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.  The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
  # @param project_key
  # @param store_key
  # @param customer_id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_customer_id_by_customer_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_get
  # Queries carts in a specific Store.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CartPagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_carts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_key_by_key_delete
  # @param project_key
  # @param store_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_key_by_key_get
  # Returns a cart by its key from a specific Store. If the cart exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. The cart may not contain up-to-date prices, discounts etc. If you want to ensure they&#x27;re up-to-date, send an Update request with the Recalculate update action instead.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_key_by_key_post
  # Updates a [Cart](ctp:api:type:Cart) in the Store specified by &#x60;storeKey&#x60;. If the Cart exists in the Project but does not have the store field, or the &#x60;store&#x60; field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFound) error.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [CartUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_post
  # Creates a [Cart](ctp:api:type:Cart) in the Store specified by &#x60;storeKey&#x60;. When using this endpoint the Cart&#x27;s &#x60;store&#x60; field is always set to the store specified in the path parameter. Creating a Cart can fail with an [InvalidOperationError](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate which does not match the Cart.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [CartDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_carts_replicate_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [ReplicaCartDraft] :body
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_carts_replicate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_by_id_delete
  # @param project_key
  # @param store_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_by_id_get
  # Returns a customer by its ID from a specific Store. It also considers customers that do not have the stores field. If the customer exists in the project but the stores field references different stores, this method returns a ResourceNotFound error.
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_by_id_post
  # Updates a customer in the store specified by {storeKey}. If the customer exists in the project but the stores field references a different store, this method returns a ResourceNotFound error.
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_email_confirm_post
  # Verifies customer&#x27;s email using a token.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerEmailVerify] :body
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_email_confirm_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get
  # @param project_key
  # @param store_key
  # @param email_token
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_email_token_by_email_token_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_email_token_post
  # Create a Token for verifying the Customer&#x27;s Email in store
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerCreateEmailToken] :body
  # @return [CustomerToken]
  describe 'by_project_key_in_store_key_by_store_key_customers_email_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_get
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CustomerPagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_customers_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_key_by_key_delete
  # @param project_key
  # @param store_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_key_by_key_get
  # Returns a customer by its Key from a specific Store. It also considers customers that do not have the stores field. If the customer exists in the project but the stores field references different stores, this method returns a ResourceNotFound error.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_key_by_key_post
  # If the customer exists in the project but the stores field references a different store, this method returns a ResourceNotFound error.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_password_post
  # Change a customers password
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerChangePassword] :body
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_password_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_password_reset_post
  # Set a new password using a token.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerResetPassword] :body
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_password_reset_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get
  # @param project_key
  # @param store_key
  # @param password_token
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_customers_password_token_by_password_token_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_password_token_post
  # The token value is used to reset the password of the customer with the given email. The token is valid only for 10 minutes.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerCreatePasswordResetToken] :body
  # @return [CustomerToken]
  describe 'by_project_key_in_store_key_by_store_key_customers_password_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_customers_post
  # Creates a customer in a specific Store. When using this endpoint, if omitted, the customer&#x27;s stores field is set to the store specified in the path parameter. If an anonymous cart is passed in as when using this method, then the cart is assigned to the created customer and the version number of the Cart increases. If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer and the store specified. If you pass in a cart with a store field specified, the store field must reference the same store specified in the {storeKey} path parameter.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [CustomerSignInResult]
  describe 'by_project_key_in_store_key_by_store_key_customers_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_login_post
  # Authenticate Customer (Sign In) in store
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerSignin] :body
  # @return [CustomerSignInResult]
  describe 'by_project_key_in_store_key_by_store_key_login_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_active_cart_get
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_me_active_cart_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_carts_by_id_delete
  # @param project_key
  # @param store_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_me_carts_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_carts_by_id_get
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_me_carts_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_carts_by_id_post
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [MyCartUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_me_carts_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_carts_get
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CartPagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_me_carts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_carts_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCartDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_in_store_key_by_store_key_me_carts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_delete
  # Delete my Customer in a store
  # @param project_key
  # @param store_key
  # @param version
  # @param [Hash] opts the optional parameters
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_me_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_email_confirm_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerEmailVerify] :body
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_me_email_confirm_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_get
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_me_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_login_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerSignin] :body
  # @return [CustomerSignInResult]
  describe 'by_project_key_in_store_key_by_store_key_me_login_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_orders_by_id_get
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_me_orders_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_orders_get
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [OrderPagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_me_orders_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_orders_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyOrderFromCartDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_me_orders_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_password_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerChangePassword] :body
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_me_password_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_password_reset_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerResetPassword] :body
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_me_password_reset_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_post
  # Update my customer in a store
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerUpdate] :body
  # @return [Customer]
  describe 'by_project_key_in_store_key_by_store_key_me_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete
  # @param project_key
  # @param store_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get
  # Gets a shopping list by ID.
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [MyShoppingListUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_me_shopping_lists_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_shopping_lists_get
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ShoppingListPagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_me_shopping_lists_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete
  # @param project_key
  # @param store_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get
  # Gets a shopping list by Key.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post
  # Update a shopping list found by its Key.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [MyShoppingListUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_me_shopping_lists_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_shopping_lists_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyShoppingListDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_me_shopping_lists_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_me_signup_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerDraft] :body
  # @return [CustomerSignInResult]
  describe 'by_project_key_in_store_key_by_store_key_me_signup_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_orders_by_id_delete
  # @param project_key
  # @param store_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_orders_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_orders_by_id_get
  # Returns an order by its ID from a specific Store. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_orders_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_orders_by_id_post
  # Updates an order in the store specified by {storeKey}. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error.
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [OrderUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_orders_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_orders_get
  # Queries orders in a specific Store.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [OrderPagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_orders_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete
  # @param project_key
  # @param store_key
  # @param order_number
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get
  # Returns an order by its order number from a specific Store.  If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
  # @param project_key
  # @param store_key
  # @param order_number
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post
  # Updates an order in the store specified by {storeKey}. If the order exists in the project but does not have the store field, or the store field references a different store, this method returns a ResourceNotFound error. In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
  # @param project_key
  # @param store_key
  # @param order_number
  # @param [Hash] opts the optional parameters
  # @option opts [OrderUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_orders_order_number_by_order_number_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_orders_post
  # Creates an order from a Cart from a specific Store. When using this endpoint the orders&#x27;s store field is always set to the store specified in the path parameter. The cart must have a shipping address set before creating an order. When using the Platform TaxMode, the shipping address is used for tax calculation.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [OrderFromCartDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_in_store_key_by_store_key_orders_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_product_projections_by_id_get
  # Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID from the specified Store.
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductProjection]
  describe 'by_project_key_in_store_key_by_store_key_product_projections_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get
  # Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key from the specified Store.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductProjection]
  describe 'by_project_key_in_store_key_by_store_key_product_projections_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_product_selection_assignments_get
  # Queries Product Selection assignments in a specific Store.  The response will include duplicate Products whenever more than one active Product Selection of the Store includes a Product. To make clear through which Product Selection a Product is available in the Store the response contains assignments including both the Product and the Product Selection. Only Products of Product Selections that are activated in Store will be returned.
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<Expansion>] :expand
  # @return [ProductsInStorePagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_product_selection_assignments_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get
  # Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart in a given Store. Each ShippingMethod contains exactly one ShippingRate with the flag &#x60;isMatching&#x60; set to &#x60;true&#x60;. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
  # @param project_key
  # @param store_key
  # @param cart_id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethodPagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_shipping_methods_matching_cart_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete
  # @param project_key
  # @param store_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_shopping_lists_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get
  # Gets a shopping list by ID.
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_shopping_lists_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post
  # @param project_key
  # @param store_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ShoppingListUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_shopping_lists_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shopping_lists_get
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ShoppingListPagedQueryResponse]
  describe 'by_project_key_in_store_key_by_store_key_shopping_lists_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete
  # @param project_key
  # @param store_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get
  # Gets a shopping list by Key.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post
  # Update a shopping list found by its Key.
  # @param project_key
  # @param store_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ShoppingListUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_shopping_lists_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_in_store_key_by_store_key_shopping_lists_post
  # @param project_key
  # @param store_key
  # @param [Hash] opts the optional parameters
  # @option opts [ShoppingListDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_in_store_key_by_store_key_shopping_lists_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_inventory_by_id_delete
  # Produces the [InventoryEntryDeletedMessage](ctp:api:type:InventoryEntryDeletedMessage).
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [InventoryEntry]
  describe 'by_project_key_inventory_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_inventory_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [InventoryEntry]
  describe 'by_project_key_inventory_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_inventory_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [InventoryEntryUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [InventoryEntry]
  describe 'by_project_key_inventory_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_inventory_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [InventoryPagedQueryResponse]
  describe 'by_project_key_inventory_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_inventory_key_by_key_delete
  # Produces the [InventoryEntryDeletedMessage](ctp:api:type:InventoryEntryDeletedMessage).
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [InventoryEntry]
  describe 'by_project_key_inventory_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_inventory_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [InventoryEntry]
  describe 'by_project_key_inventory_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_inventory_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [InventoryEntryUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [InventoryEntry]
  describe 'by_project_key_inventory_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_inventory_post
  # Produces the [InventoryEntryCreatedMessage](ctp:api:type:InventoryEntryCreatedMessage).
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [InventoryEntryDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [InventoryEntry]
  describe 'by_project_key_inventory_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_login_post
  # Authenticate Customer (Sign In). Retrieves the authenticated customer (a customer that matches the given email/password pair). If used with an access token for Anonymous Sessions, all orders and carts belonging to the anonymousId will be assigned to the newly created customer. If a cart is is returned as part of the CustomerSignInResult, it has been recalculated (It will have up-to-date prices, taxes and discounts, and invalid line items have been removed.).
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerSignin] :body
  # @return [CustomerSignInResult]
  describe 'by_project_key_login_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_active_cart_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @return [Cart]
  describe 'by_project_key_me_active_cart_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_me_carts_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_me_carts_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [MyCartUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_me_carts_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [CartPagedQueryResponse]
  describe 'by_project_key_me_carts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_me_carts_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_me_carts_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCartUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_me_carts_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCartDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Cart]
  describe 'by_project_key_me_carts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_carts_replicate_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ReplicaMyCartDraft] :body
  # @return [Cart]
  describe 'by_project_key_me_carts_replicate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_delete
  # Delete my Customer
  # @param project_key
  # @param version
  # @param [Hash] opts the optional parameters
  # @return [Customer]
  describe 'by_project_key_me_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_email_confirm_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [CustomerEmailVerify] :body
  # @return [Customer]
  describe 'by_project_key_me_email_confirm_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [Customer]
  describe 'by_project_key_me_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_login_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerSignin] :body
  # @return [CustomerSignInResult]
  describe 'by_project_key_me_login_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_orders_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_me_orders_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_orders_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [OrderPagedQueryResponse]
  describe 'by_project_key_me_orders_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_orders_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyOrderFromCartDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_me_orders_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_password_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerChangePassword] :body
  # @return [Customer]
  describe 'by_project_key_me_password_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_password_reset_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerResetPassword] :body
  # @return [Customer]
  describe 'by_project_key_me_password_reset_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_payments_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [MyPayment]
  describe 'by_project_key_me_payments_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_payments_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [MyPayment]
  describe 'by_project_key_me_payments_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_payments_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [MyPaymentUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [MyPayment]
  describe 'by_project_key_me_payments_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_payments_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [MyPaymentPagedQueryResponse]
  describe 'by_project_key_me_payments_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_payments_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [MyPayment]
  describe 'by_project_key_me_payments_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_payments_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [MyPayment]
  describe 'by_project_key_me_payments_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_payments_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [MyPaymentUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [MyPayment]
  describe 'by_project_key_me_payments_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_payments_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyPaymentDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [MyPayment]
  describe 'by_project_key_me_payments_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_post
  # Update my customer
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerUpdate] :body
  # @return [Customer]
  describe 'by_project_key_me_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_quote_requests_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_me_quote_requests_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_quote_requests_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_me_quote_requests_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_quote_requests_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [MyQuoteRequestUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_me_quote_requests_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_quote_requests_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [QuoteRequestPagedQueryResponse]
  describe 'by_project_key_me_quote_requests_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_quote_requests_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_me_quote_requests_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_quote_requests_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_me_quote_requests_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_quote_requests_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [MyQuoteRequestUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_me_quote_requests_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_quote_requests_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyQuoteRequestDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_me_quote_requests_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_shopping_lists_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_me_shopping_lists_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_shopping_lists_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_me_shopping_lists_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_shopping_lists_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [MyShoppingListUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_me_shopping_lists_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_shopping_lists_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ShoppingListPagedQueryResponse]
  describe 'by_project_key_me_shopping_lists_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_shopping_lists_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_me_shopping_lists_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_shopping_lists_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_me_shopping_lists_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_shopping_lists_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [MyShoppingListUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_me_shopping_lists_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_shopping_lists_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyShoppingListDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_me_shopping_lists_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_me_signup_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [MyCustomerDraft] :body
  # @return [CustomerSignInResult]
  describe 'by_project_key_me_signup_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_messages_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Message]
  describe 'by_project_key_messages_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_messages_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [MessagePagedQueryResponse]
  describe 'by_project_key_messages_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_orders_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_orders_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [OrderUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_orders_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_by_id_apply_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [OrderEditApply] :body
  # @return [OrderEdit]
  describe 'by_project_key_orders_edits_by_id_apply_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [OrderEdit]
  describe 'by_project_key_orders_edits_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [OrderEdit]
  describe 'by_project_key_orders_edits_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [OrderEditUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [OrderEdit]
  describe 'by_project_key_orders_edits_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [OrderEditPagedQueryResponse]
  describe 'by_project_key_orders_edits_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [OrderEdit]
  describe 'by_project_key_orders_edits_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [OrderEdit]
  describe 'by_project_key_orders_edits_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [OrderEditUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [OrderEdit]
  describe 'by_project_key_orders_edits_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_edits_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [OrderEditDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [OrderEdit]
  describe 'by_project_key_orders_edits_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [OrderPagedQueryResponse]
  describe 'by_project_key_orders_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_import_post
  # Create an Order by Import
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [OrderImportDraft] :body
  # @return [Order]
  describe 'by_project_key_orders_import_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_order_number_by_order_number_delete
  # @param project_key
  # @param order_number
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_orders_order_number_by_order_number_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_order_number_by_order_number_get
  # In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+, it should be provided in URL-encoded format.
  # @param project_key
  # @param order_number
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_orders_order_number_by_order_number_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_order_number_by_order_number_post
  # @param project_key
  # @param order_number
  # @param [Hash] opts the optional parameters
  # @option opts [OrderUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_orders_order_number_by_order_number_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_post
  # Creates an order from a Cart. The cart must have a shipping address set before creating an order. When using the Platform TaxMode, the shipping address is used for tax calculation.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [OrderFromCartDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Order]
  describe 'by_project_key_orders_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_search_head
  # Checks whether a search index for the Project&#x27;s Orders exists.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'by_project_key_orders_search_head test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_orders_search_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [OrderSearchRequest] :body
  # @return [OrderPagedSearchResponse]
  describe 'by_project_key_orders_search_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_payments_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Payment]
  describe 'by_project_key_payments_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_payments_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Payment]
  describe 'by_project_key_payments_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_payments_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [PaymentUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Payment]
  describe 'by_project_key_payments_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_payments_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [PaymentPagedQueryResponse]
  describe 'by_project_key_payments_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_payments_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Payment]
  describe 'by_project_key_payments_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_payments_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Payment]
  describe 'by_project_key_payments_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_payments_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [PaymentUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Payment]
  describe 'by_project_key_payments_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_payments_post
  # To create a payment object a payment draft object has to be given with the request.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [PaymentDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Payment]
  describe 'by_project_key_payments_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ProjectUpdate] :body
  # @return [Project]
  describe 'by_project_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductDiscount]
  describe 'by_project_key_product_discounts_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductDiscount]
  describe 'by_project_key_product_discounts_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ProductDiscountUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductDiscount]
  describe 'by_project_key_product_discounts_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ProductDiscountPagedQueryResponse]
  describe 'by_project_key_product_discounts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductDiscount]
  describe 'by_project_key_product_discounts_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductDiscount]
  describe 'by_project_key_product_discounts_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductDiscountUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductDiscount]
  describe 'by_project_key_product_discounts_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_matching_post
  # This endpoint can be used to simulate which Product Discounts would be applied if a specified Product Variant had a specified Price. Given Product and Product Variant IDs and a Price, this endpoint will return the [ProductDiscount](ctp:api:type:ProductDiscount) that would have been applied to that Price.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductDiscountMatchQuery] :body
  # @return [ProductDiscount]
  describe 'by_project_key_product_discounts_matching_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_discounts_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductDiscountDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductDiscount]
  describe 'by_project_key_product_discounts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_projections_by_id_get
  # Gets the current or staged representation of a product in a catalog by ID. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :staged
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [ProductProjection]
  describe 'by_project_key_product_projections_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_projections_get
  # You can use the product projections query endpoint to get the current or staged representations of Products. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :staged
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ProductProjectionPagedQueryResponse]
  describe 'by_project_key_product_projections_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_projections_key_by_key_get
  # Gets the current or staged representation of a product found by Key. When used with an API client that has the view_published_products:{projectKey} scope, this endpoint only returns published (current) product projections.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :staged
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [ProductProjection]
  describe 'by_project_key_product_projections_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_projections_search_get
  # Search Product Projection
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :fuzzy
  # @option opts [Float] :fuzzy_level
  # @option opts [BOOLEAN] :mark_matching_variants
  # @option opts [BOOLEAN] :staged
  # @option opts [Array<String>] :filter
  # @option opts [Array<String>] :filter_facets
  # @option opts [Array<String>] :filter_query
  # @option opts [Array<String>] :facet
  # @option opts [Array<String>] :text__a_z2___a_z2
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [ProductProjectionPagedSearchResponse]
  describe 'by_project_key_product_projections_search_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_projections_search_post
  # Search Product Projection
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @return [ProductProjectionPagedSearchResponse]
  describe 'by_project_key_product_projections_search_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_projections_suggest_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :fuzzy
  # @option opts [BOOLEAN] :staged
  # @option opts [Array<String>] :search_keywords__a_z2___a_z2
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @return [SuggestionResult]
  describe 'by_project_key_product_projections_suggest_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_by_id_delete
  # Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductSelection]
  describe 'by_project_key_product_selections_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductSelection]
  describe 'by_project_key_product_selections_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ProductSelectionUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductSelection]
  describe 'by_project_key_product_selections_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_by_id_products_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @return [ProductSelectionProductPagedQueryResponse]
  describe 'by_project_key_product_selections_by_id_products_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ProductSelectionPagedQueryResponse]
  describe 'by_project_key_product_selections_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_key_by_key_delete
  # Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductSelection]
  describe 'by_project_key_product_selections_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductSelection]
  describe 'by_project_key_product_selections_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductSelectionUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductSelection]
  describe 'by_project_key_product_selections_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_key_by_key_products_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @return [ProductSelectionProductPagedQueryResponse]
  describe 'by_project_key_product_selections_key_by_key_products_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_selections_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductSelectionDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductSelection]
  describe 'by_project_key_product_selections_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductType]
  describe 'by_project_key_product_types_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductType]
  describe 'by_project_key_product_types_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_by_id_head
  # Checks if a Product Type with given &#x60;id&#x60; exists. Responds with a &#x60;200 OK&#x60; status if the &#x60;Product Type&#x60; exists or &#x60;404 Not Found&#x60; otherwise.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'by_project_key_product_types_by_id_head test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ProductTypeUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductType]
  describe 'by_project_key_product_types_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ProductTypePagedQueryResponse]
  describe 'by_project_key_product_types_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_head
  # Check if Product Types exist. Responds with a &#x60;200 OK&#x60; status if any Product Types match the Query Predicate, or &#x60;404 Not Found&#x60; otherwise.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [QueryPredicate] :where
  # @return [nil]
  describe 'by_project_key_product_types_head test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductType]
  describe 'by_project_key_product_types_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ProductType]
  describe 'by_project_key_product_types_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_key_by_key_head
  # Checks if a Product Type with given &#x60;key&#x60; exists. Responds with a &#x60;200 OK&#x60; status if the &#x60;Product Type&#x60; exists or &#x60;404 Not Found&#x60; otherwise.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'by_project_key_product_types_key_by_key_head test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductTypeUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductType]
  describe 'by_project_key_product_types_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_product_types_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductTypeDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ProductType]
  describe 'by_project_key_product_types_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [Product]
  describe 'by_project_key_products_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_by_id_get
  # Gets the full representation of a product by ID.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [Product]
  describe 'by_project_key_products_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_by_id_head
  # Checks if product with given ID exists.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'by_project_key_products_by_id_head test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_by_id_images_post
  # Uploads a binary image file to a given product variant. The supported image formats are JPEG, PNG and GIF.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :body
  # @option opts [String] :filename
  # @option opts [Float] :variant
  # @option opts [String] :sku
  # @option opts [BOOLEAN] :staged
  # @return [Product]
  describe 'by_project_key_products_by_id_images_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ProductUpdate] :body
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [Product]
  describe 'by_project_key_products_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_by_id_product_selections_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [AssignedProductSelectionPagedQueryResponse]
  describe 'by_project_key_products_by_id_product_selections_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_get
  # You can use the query endpoint to get the full representations of products. REMARK: We suggest to use the performance optimized search endpoint which has a bunch functionalities, the query API lacks like sorting on custom attributes, etc.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ProductPagedQueryResponse]
  describe 'by_project_key_products_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_head
  # Checks if products exist.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'by_project_key_products_head test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [Product]
  describe 'by_project_key_products_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_key_by_key_get
  # Gets the full representation of a product by Key.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [Product]
  describe 'by_project_key_products_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_key_by_key_head
  # Checks if product with given key exists.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'by_project_key_products_key_by_key_head test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductUpdate] :body
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [Product]
  describe 'by_project_key_products_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_key_by_key_product_selections_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [AssignedProductSelectionPagedQueryResponse]
  describe 'by_project_key_products_key_by_key_product_selections_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_products_post
  # To create a new product, send a representation that is going to become the initial staged representation of the new product in the master catalog. If price selection query parameters are provided, the selected prices will be added to the response.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ProductDraft] :body
  # @option opts [String] :price_currency
  # @option opts [String] :price_country
  # @option opts [String] :price_customer_group
  # @option opts [String] :price_channel
  # @option opts [Array<String>] :locale_projection
  # @option opts [String] :store_projection
  # @option opts [Array<Expansion>] :expand
  # @return [Product]
  describe 'by_project_key_products_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quote_requests_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_quote_requests_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quote_requests_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_quote_requests_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quote_requests_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [QuoteRequestUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_quote_requests_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quote_requests_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [QuoteRequestPagedQueryResponse]
  describe 'by_project_key_quote_requests_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quote_requests_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_quote_requests_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quote_requests_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_quote_requests_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quote_requests_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [QuoteRequestUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_quote_requests_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quote_requests_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [QuoteRequestDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [QuoteRequest]
  describe 'by_project_key_quote_requests_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quotes_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Quote]
  describe 'by_project_key_quotes_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quotes_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Quote]
  describe 'by_project_key_quotes_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quotes_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [QuoteUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Quote]
  describe 'by_project_key_quotes_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quotes_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [QuotePagedQueryResponse]
  describe 'by_project_key_quotes_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quotes_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Quote]
  describe 'by_project_key_quotes_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quotes_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Quote]
  describe 'by_project_key_quotes_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quotes_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [QuoteUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Quote]
  describe 'by_project_key_quotes_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_quotes_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [QuoteDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Quote]
  describe 'by_project_key_quotes_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_reviews_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Review]
  describe 'by_project_key_reviews_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_reviews_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Review]
  describe 'by_project_key_reviews_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_reviews_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ReviewUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Review]
  describe 'by_project_key_reviews_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_reviews_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ReviewPagedQueryResponse]
  describe 'by_project_key_reviews_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_reviews_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [Review]
  describe 'by_project_key_reviews_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_reviews_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Review]
  describe 'by_project_key_reviews_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_reviews_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ReviewUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Review]
  describe 'by_project_key_reviews_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_reviews_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ReviewDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Review]
  describe 'by_project_key_reviews_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethod]
  describe 'by_project_key_shipping_methods_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethod]
  describe 'by_project_key_shipping_methods_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ShippingMethodUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethod]
  describe 'by_project_key_shipping_methods_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ShippingMethodPagedQueryResponse]
  describe 'by_project_key_shipping_methods_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethod]
  describe 'by_project_key_shipping_methods_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethod]
  describe 'by_project_key_shipping_methods_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ShippingMethodUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethod]
  describe 'by_project_key_shipping_methods_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_matching_cart_get
  # Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart. Each ShippingMethod contains exactly one ShippingRate with the flag &#x60;isMatching&#x60; set to &#x60;true&#x60;. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
  # @param project_key
  # @param cart_id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethodPagedQueryResponse]
  describe 'by_project_key_shipping_methods_matching_cart_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_matching_location_get
  # Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location). If the &#x60;currency&#x60; parameter is given, then the ShippingMethods must also have a rate defined in the specified currency. Each ShippingMethod contains at least one ShippingRate with the flag &#x60;isMatching&#x60; set to &#x60;true&#x60;. If the &#x60;currency&#x60; parameter is given, exactly one ShippingRate will contain it.
  # @param project_key
  # @param country
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state
  # @option opts [String] :currency
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @return [ShippingMethodPagedQueryResponse]
  describe 'by_project_key_shipping_methods_matching_location_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_matching_orderedit_get
  # Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location) for an [OrderEdit](/projects/order-edits). In case the OrderEdit preview cannot be created an [EditPreviewFailed](ctp:api:type:EditPreviewFailedError) error is raised.
  # @param project_key
  # @param order_edit_id
  # @param country
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state
  # @return [ShippingMethodPagedQueryResponse]
  describe 'by_project_key_shipping_methods_matching_orderedit_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shipping_methods_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ShippingMethodDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShippingMethod]
  describe 'by_project_key_shipping_methods_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shopping_lists_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_shopping_lists_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shopping_lists_by_id_get
  # Gets a shopping list by ID.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_shopping_lists_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shopping_lists_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ShoppingListUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_shopping_lists_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shopping_lists_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ShoppingListPagedQueryResponse]
  describe 'by_project_key_shopping_lists_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shopping_lists_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_shopping_lists_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shopping_lists_key_by_key_get
  # Gets a shopping list by Key.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_shopping_lists_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shopping_lists_key_by_key_post
  # Update a shopping list found by its Key.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ShoppingListUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_shopping_lists_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_shopping_lists_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ShoppingListDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [ShoppingList]
  describe 'by_project_key_shopping_lists_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_staged_quotes_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [StagedQuote]
  describe 'by_project_key_staged_quotes_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_staged_quotes_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [StagedQuote]
  describe 'by_project_key_staged_quotes_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_staged_quotes_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [StagedQuoteUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [StagedQuote]
  describe 'by_project_key_staged_quotes_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_staged_quotes_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [StagedQuotePagedQueryResponse]
  describe 'by_project_key_staged_quotes_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_staged_quotes_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :data_erasure
  # @option opts [Array<Expansion>] :expand
  # @return [StagedQuote]
  describe 'by_project_key_staged_quotes_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_staged_quotes_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [StagedQuote]
  describe 'by_project_key_staged_quotes_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_staged_quotes_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [StagedQuoteUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [StagedQuote]
  describe 'by_project_key_staged_quotes_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_staged_quotes_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [StagedQuoteDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [StagedQuote]
  describe 'by_project_key_staged_quotes_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_standalone_prices_by_id_delete
  # Produces the [StandalonePriceDeletedMessage](ctp:api:type:StandalonePriceDeletedMessage).
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [StandalonePrice]
  describe 'by_project_key_standalone_prices_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_standalone_prices_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [StandalonePrice]
  describe 'by_project_key_standalone_prices_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_standalone_prices_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [StandalonePriceUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [StandalonePrice]
  describe 'by_project_key_standalone_prices_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_standalone_prices_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [StandalonePricePagedQueryResponse]
  describe 'by_project_key_standalone_prices_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_standalone_prices_key_by_key_delete
  # Produces the [StandalonePriceDeletedMessage](ctp:api:type:StandalonePriceDeletedMessage).
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [StandalonePrice]
  describe 'by_project_key_standalone_prices_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_standalone_prices_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [StandalonePrice]
  describe 'by_project_key_standalone_prices_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_standalone_prices_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [StandalonePriceUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [StandalonePrice]
  describe 'by_project_key_standalone_prices_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_standalone_prices_post
  # Produces the [StandalonePriceCreatedMessage](ctp:api:type:StandalonePriceCreatedMessage).
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [StandalonePriceDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [StandalonePrice]
  describe 'by_project_key_standalone_prices_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_states_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [State]
  describe 'by_project_key_states_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_states_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [State]
  describe 'by_project_key_states_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_states_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [StateUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [State]
  describe 'by_project_key_states_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_states_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [StatePagedQueryResponse]
  describe 'by_project_key_states_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_states_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [State]
  describe 'by_project_key_states_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_states_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [State]
  describe 'by_project_key_states_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_states_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [StateUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [State]
  describe 'by_project_key_states_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_states_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [StateDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [State]
  describe 'by_project_key_states_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_stores_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Store]
  describe 'by_project_key_stores_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_stores_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Store]
  describe 'by_project_key_stores_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_stores_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [StoreUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Store]
  describe 'by_project_key_stores_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_stores_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [StorePagedQueryResponse]
  describe 'by_project_key_stores_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_stores_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Store]
  describe 'by_project_key_stores_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_stores_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Store]
  describe 'by_project_key_stores_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_stores_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [StoreUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Store]
  describe 'by_project_key_stores_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_stores_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [StoreDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Store]
  describe 'by_project_key_stores_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_subscriptions_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Subscription]
  describe 'by_project_key_subscriptions_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_subscriptions_by_id_get
  # Retrieves the representation of a subscription by its id.
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Subscription]
  describe 'by_project_key_subscriptions_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_subscriptions_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [SubscriptionUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Subscription]
  describe 'by_project_key_subscriptions_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_subscriptions_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [SubscriptionPagedQueryResponse]
  describe 'by_project_key_subscriptions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_subscriptions_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Subscription]
  describe 'by_project_key_subscriptions_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_subscriptions_key_by_key_get
  # Retrieves the representation of a subscription by its key.
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Subscription]
  describe 'by_project_key_subscriptions_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_subscriptions_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [SubscriptionUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Subscription]
  describe 'by_project_key_subscriptions_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_subscriptions_post
  # The creation of a Subscription is eventually consistent, it may take up to a minute before it becomes fully active. In order to test that the destination is correctly configured, a test message will be put into the queue. If the message could not be delivered, the subscription will not be created. The payload of the test message is a notification of type ResourceCreated for the resourceTypeId subscription. Currently, a maximum of 25 subscriptions can be created per project.
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [SubscriptionDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Subscription]
  describe 'by_project_key_subscriptions_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_tax_categories_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [TaxCategory]
  describe 'by_project_key_tax_categories_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_tax_categories_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [TaxCategory]
  describe 'by_project_key_tax_categories_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_tax_categories_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [TaxCategoryUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [TaxCategory]
  describe 'by_project_key_tax_categories_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_tax_categories_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [TaxCategoryPagedQueryResponse]
  describe 'by_project_key_tax_categories_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_tax_categories_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [TaxCategory]
  describe 'by_project_key_tax_categories_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_tax_categories_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [TaxCategory]
  describe 'by_project_key_tax_categories_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_tax_categories_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [TaxCategoryUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [TaxCategory]
  describe 'by_project_key_tax_categories_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_tax_categories_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [TaxCategoryDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [TaxCategory]
  describe 'by_project_key_tax_categories_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_types_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Type]
  describe 'by_project_key_types_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_types_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Type]
  describe 'by_project_key_types_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_types_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [TypeUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Type]
  describe 'by_project_key_types_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_types_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [TypePagedQueryResponse]
  describe 'by_project_key_types_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_types_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Type]
  describe 'by_project_key_types_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_types_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Type]
  describe 'by_project_key_types_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_types_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [TypeUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Type]
  describe 'by_project_key_types_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_types_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [TypeDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Type]
  describe 'by_project_key_types_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_zones_by_id_delete
  # @param project_key
  # @param id
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Zone]
  describe 'by_project_key_zones_by_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_zones_by_id_get
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Zone]
  describe 'by_project_key_zones_by_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_zones_by_id_post
  # @param project_key
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [ZoneUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Zone]
  describe 'by_project_key_zones_by_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_zones_get
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @option opts [Array<Sort>] :sort
  # @option opts [Float] :limit
  # @option opts [Float] :offset
  # @option opts [BOOLEAN] :with_total
  # @option opts [Array<QueryPredicate>] :where
  # @option opts [Array<String>] :var___a_z_a_z0_9
  # @return [ZonePagedQueryResponse]
  describe 'by_project_key_zones_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_zones_key_by_key_delete
  # @param project_key
  # @param key
  # @param version
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Zone]
  describe 'by_project_key_zones_key_by_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_zones_key_by_key_get
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Expansion>] :expand
  # @return [Zone]
  describe 'by_project_key_zones_key_by_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_zones_key_by_key_post
  # @param project_key
  # @param key
  # @param [Hash] opts the optional parameters
  # @option opts [ZoneUpdate] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Zone]
  describe 'by_project_key_zones_key_by_key_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for by_project_key_zones_post
  # @param project_key
  # @param [Hash] opts the optional parameters
  # @option opts [ZoneDraft] :body
  # @option opts [Array<Expansion>] :expand
  # @return [Zone]
  describe 'by_project_key_zones_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end
end
